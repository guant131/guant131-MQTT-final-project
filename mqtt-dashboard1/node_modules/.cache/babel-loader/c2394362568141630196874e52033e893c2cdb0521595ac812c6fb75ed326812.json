{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport axios from 'axios';\nexport default {\n  name: 'DeviceData',\n  data() {\n    return {\n      historyData: [],\n      loading: true,\n      error: null,\n      maxTemperature: null,\n      maxTemperatureTime: null,\n      minTemperature: null,\n      minTemperatureTime: null,\n      searchTime: '',\n      searchResult: null,\n      searchPerformed: false\n    };\n  },\n  created() {\n    this.fetchHistoryData();\n  },\n  methods: {\n    fetchHistoryData() {\n      this.loading = true;\n      this.error = null;\n      axios.get(`http://localhost:5050/api/history/temperature`).then(res => {\n        const allData = res.data.history || [];\n        // Sort the data by timestamp\n        const sortedData = allData.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n        this.historyData = sortedData;\n        this.calculateTemperatureInfo();\n      }).catch(err => {\n        this.error = 'Failed to fetch historical data. Please try again later.';\n        console.error('Failed to fetch historical data:', err);\n      }).finally(() => {\n        this.loading = false;\n      });\n    },\n    calculateTemperatureInfo() {\n      if (this.historyData.length === 0) {\n        return;\n      }\n      let maxTemp = this.historyData[0].temperature;\n      let maxTempTime = this.historyData[0].timestamp;\n      let minTemp = this.historyData[0].temperature;\n      let minTempTime = this.historyData[0].timestamp;\n      for (let data of this.historyData) {\n        if (data.temperature > maxTemp) {\n          maxTemp = data.temperature;\n          maxTempTime = data.timestamp;\n        }\n        if (data.temperature < minTemp) {\n          minTemp = data.temperature;\n          minTempTime = data.timestamp;\n        }\n      }\n      this.maxTemperature = maxTemp;\n      this.maxTemperatureTime = maxTempTime;\n      this.minTemperature = minTemp;\n      this.minTemperatureTime = minTempTime;\n    },\n    searchByTime() {\n      this.searchPerformed = true;\n      this.searchResult = this.historyData.find(data => data.timestamp === this.searchTime);\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","historyData","loading","error","maxTemperature","maxTemperatureTime","minTemperature","minTemperatureTime","searchTime","searchResult","searchPerformed","created","fetchHistoryData","methods","get","then","res","allData","history","sortedData","sort","a","b","Date","timestamp","calculateTemperatureInfo","catch","err","console","finally","length","maxTemp","temperature","maxTempTime","minTemp","minTempTime","searchByTime","find"],"sources":["src/views/DeviceData.vue"],"sourcesContent":["<template>\n  <div>\n    <div class=\"header-container\">\n      <h2>Temperature History Data</h2>\n      <el-button\n        size=\"small\"\n        type=\"primary\"\n        @click=\"fetchHistoryData\"\n        class=\"refresh-button\"\n      >\n        Refresh\n      </el-button>\n    </div>\n    <!-- The newly added temperature information window -->\n    <el-card class=\"temperature-info-card\">\n      <div slot=\"header\">Temperature Information</div>\n      <div class=\"info-content\">\n        <p>Max Temperature: {{ maxTemperature }}째C at {{ maxTemperatureTime }}</p>\n        <p>Min Temperature: {{ minTemperature }}째C at {{ minTemperatureTime }}</p>\n      </div>\n    </el-card>\n    <!-- The newly added time search window -->\n    <el-card class=\"search-info-card\">\n      <div slot=\"header\">Search by Time</div>\n      <div class=\"info-content\">\n        <el-input v-model=\"searchTime\" placeholder=\"Enter timestamp\" @keyup.enter=\"searchByTime\"></el-input>\n        <el-button @click=\"searchByTime\">Search</el-button>\n        <p v-if=\"searchResult\">Temperature: {{ searchResult.temperature }}째C</p>\n        <p v-else-if=\"searchPerformed &&!searchResult\">No data found for the given time.</p>\n      </div>\n    </el-card>\n    <el-card>\n      <div slot=\"header\">History Data List</div>\n      <div class=\"history-data-scroll\">\n        <table class=\"history-table\">\n          <thead>\n            <tr>\n              <th>Timestamp</th>\n              <th>Temperature (째C)</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr v-for=\"(data, index) in historyData\" :key=\"index\">\n              <td>{{ data.timestamp }}</td>\n              <td>{{ data.temperature }}</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </el-card>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'DeviceData',\n  data() {\n    return {\n      historyData: [],\n      loading: true,\n      error: null,\n      maxTemperature: null,\n      maxTemperatureTime: null,\n      minTemperature: null,\n      minTemperatureTime: null,\n      searchTime: '',\n      searchResult: null,\n      searchPerformed: false\n    };\n  },\n  created() {\n    this.fetchHistoryData();\n  },\n  methods: {\n    fetchHistoryData() {\n      this.loading = true;\n      this.error = null;\n      axios.get(`http://localhost:5050/api/history/temperature`)\n        .then(res => {\n          const allData = res.data.history || [];\n          // Sort the data by timestamp\n          const sortedData = allData.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n          this.historyData = sortedData;\n          this.calculateTemperatureInfo();\n        })\n        .catch(err => {\n          this.error = 'Failed to fetch historical data. Please try again later.';\n          console.error('Failed to fetch historical data:', err);\n        })\n        .finally(() => {\n          this.loading = false;\n        });\n    },\n    calculateTemperatureInfo() {\n      if (this.historyData.length === 0) {\n        return;\n      }\n      let maxTemp = this.historyData[0].temperature;\n      let maxTempTime = this.historyData[0].timestamp;\n      let minTemp = this.historyData[0].temperature;\n      let minTempTime = this.historyData[0].timestamp;\n\n      for (let data of this.historyData) {\n        if (data.temperature > maxTemp) {\n          maxTemp = data.temperature;\n          maxTempTime = data.timestamp;\n        }\n        if (data.temperature < minTemp) {\n          minTemp = data.temperature;\n          minTempTime = data.timestamp;\n        }\n      }\n\n      this.maxTemperature = maxTemp;\n      this.maxTemperatureTime = maxTempTime;\n      this.minTemperature = minTemp;\n      this.minTemperatureTime = minTempTime;\n    },\n    searchByTime() {\n      this.searchPerformed = true;\n      this.searchResult = this.historyData.find(data => data.timestamp === this.searchTime);\n    }\n  }\n};\n</script>\n\n<style scoped>\n.header-container {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 10px;\n}\n\n.refresh-button {\n  background-color: #409EFF;\n  color: white;\n  border-radius: 5px;\n  font-size: 14px;\n}\n\n.refresh-button:hover {\n  background-color: #66b1ff;\n  color: white;\n}\n\n.temperature-info-card,\n.search-info-card {\n  margin-bottom: 20px;\n}\n\n.info-content {\n  padding: 10px;\n}\n\n.history-data-scroll {\n  max-height: 500px;\n  overflow-y: auto;\n}\n\n.history-table {\n  width: 100%;\n  border-collapse: collapse;\n}\n\n.history-table th {\n  background-color: white;\n  font-family: \"Arial\", \"Helvetica\", sans-serif;\n  font-size: 18px;\n  font-weight: 700;\n  color: #000000;\n  text-align: center;\n  border: 1px solid #d9d9d9;\n  padding: 12px;\n}\n\n.history-table td {\n  font-family: \"Arial\", \"Helvetica\", sans-serif;\n  font-size: 16px;\n  color: black;\n  text-align: center;\n  border: 1px solid #d9d9d9;\n  padding: 12px;\n}\n\n.history-table tr:nth-child(even) {\n  background-color: white;\n}\n</style>"],"mappings":";;AAsDA,OAAAA,KAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,WAAA;MACAC,OAAA;MACAC,KAAA;MACAC,cAAA;MACAC,kBAAA;MACAC,cAAA;MACAC,kBAAA;MACAC,UAAA;MACAC,YAAA;MACAC,eAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,gBAAA;EACA;EACAC,OAAA;IACAD,iBAAA;MACA,KAAAV,OAAA;MACA,KAAAC,KAAA;MACAL,KAAA,CAAAgB,GAAA,kDACAC,IAAA,CAAAC,GAAA;QACA,MAAAC,OAAA,GAAAD,GAAA,CAAAhB,IAAA,CAAAkB,OAAA;QACA;QACA,MAAAC,UAAA,GAAAF,OAAA,CAAAG,IAAA,EAAAC,CAAA,EAAAC,CAAA,SAAAC,IAAA,CAAAD,CAAA,CAAAE,SAAA,QAAAD,IAAA,CAAAF,CAAA,CAAAG,SAAA;QACA,KAAAvB,WAAA,GAAAkB,UAAA;QACA,KAAAM,wBAAA;MACA,GACAC,KAAA,CAAAC,GAAA;QACA,KAAAxB,KAAA;QACAyB,OAAA,CAAAzB,KAAA,qCAAAwB,GAAA;MACA,GACAE,OAAA;QACA,KAAA3B,OAAA;MACA;IACA;IACAuB,yBAAA;MACA,SAAAxB,WAAA,CAAA6B,MAAA;QACA;MACA;MACA,IAAAC,OAAA,QAAA9B,WAAA,IAAA+B,WAAA;MACA,IAAAC,WAAA,QAAAhC,WAAA,IAAAuB,SAAA;MACA,IAAAU,OAAA,QAAAjC,WAAA,IAAA+B,WAAA;MACA,IAAAG,WAAA,QAAAlC,WAAA,IAAAuB,SAAA;MAEA,SAAAxB,IAAA,SAAAC,WAAA;QACA,IAAAD,IAAA,CAAAgC,WAAA,GAAAD,OAAA;UACAA,OAAA,GAAA/B,IAAA,CAAAgC,WAAA;UACAC,WAAA,GAAAjC,IAAA,CAAAwB,SAAA;QACA;QACA,IAAAxB,IAAA,CAAAgC,WAAA,GAAAE,OAAA;UACAA,OAAA,GAAAlC,IAAA,CAAAgC,WAAA;UACAG,WAAA,GAAAnC,IAAA,CAAAwB,SAAA;QACA;MACA;MAEA,KAAApB,cAAA,GAAA2B,OAAA;MACA,KAAA1B,kBAAA,GAAA4B,WAAA;MACA,KAAA3B,cAAA,GAAA4B,OAAA;MACA,KAAA3B,kBAAA,GAAA4B,WAAA;IACA;IACAC,aAAA;MACA,KAAA1B,eAAA;MACA,KAAAD,YAAA,QAAAR,WAAA,CAAAoC,IAAA,CAAArC,IAAA,IAAAA,IAAA,CAAAwB,SAAA,UAAAhB,UAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}