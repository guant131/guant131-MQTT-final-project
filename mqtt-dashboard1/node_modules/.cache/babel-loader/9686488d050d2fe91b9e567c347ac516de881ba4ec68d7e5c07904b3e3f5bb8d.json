{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport axios from 'axios';\nimport LineChart from '@/components/LineChart.vue';\nexport default {\n  name: 'SurveillanceCameraPage',\n  components: {\n    LineChart\n  },\n  data() {\n    return {\n      realTimeData: null,\n      loading: true,\n      fpsChartData: {\n        labels: [],\n        datasets: [{\n          label: 'FPS',\n          data: [],\n          borderColor: '#42A5F5',\n          fill: false,\n          tension: 0.3\n        }]\n      },\n      fpsChartOptions: {\n        responsive: true,\n        animation: {\n          duration: 500\n        },\n        scales: {\n          x: {\n            display: false\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'FPS'\n            },\n            suggestedMin: 0,\n            suggestedMax: 60\n          }\n        },\n        plugins: {\n          legend: {\n            display: false\n          }\n        }\n      },\n      stream: null,\n      streamActive: false,\n      cameraError: null,\n      cameraStopped: false,\n      facingMode: 'environment',\n      yoloActive: false,\n      yoloError: null,\n      yoloLoading: false,\n      dataFetchInterval: null\n    };\n  },\n  created() {\n    this.fetchAllData();\n    this.dataFetchInterval = setInterval(this.fetchAllData, 5000);\n  },\n  beforeDestroy() {\n    clearInterval(this.dataFetchInterval);\n    this.stopCamera();\n    this.stopYolo();\n  },\n  methods: {\n    fetchAllData() {\n      axios.get('http://localhost:5050/api/history/fps').then(res => {\n        const allData = res.data.history || [];\n        const now = new Date();\n        const fiveSecondsAgo = new Date(now.getTime() - 5000);\n        const twoMinutesAgo = new Date(now.getTime() - 2 * 60 * 1000);\n        const realTime = allData.find(item => {\n          const ts = new Date(item.timestamp);\n          return ts >= fiveSecondsAgo;\n        });\n        const fpsChartDataPoints = allData.filter(item => {\n          const ts = new Date(item.timestamp);\n          return ts >= twoMinutesAgo;\n        });\n        this.realTimeData = realTime || null;\n        this.loading = false;\n        this.fpsChartData = {\n          labels: fpsChartDataPoints.map(() => ''),\n          datasets: [{\n            label: 'FPS',\n            data: fpsChartDataPoints.map(item => item.fps),\n            borderColor: '#42A5F5',\n            fill: false,\n            tension: 0.3\n          }]\n        };\n      }).catch(err => {\n        console.error('Failed to fetch data:', err);\n        this.loading = false;\n        this.$message.error('Failed to fetch real-time data. Please check your network connection.');\n      });\n    },\n    startCamera() {\n      navigator.mediaDevices.getUserMedia({\n        video: {\n          facingMode: this.facingMode\n        },\n        audio: false\n      }).then(stream => {\n        this.stream = stream;\n        const videoElement = this.$refs.cameraVideo;\n        if ('srcObject' in videoElement) {\n          videoElement.srcObject = stream;\n        } else {\n          videoElement.src = window.URL.createObjectURL(stream);\n        }\n        this.streamActive = true;\n        this.cameraError = null;\n        this.cameraStopped = false;\n      }).catch(err => {\n        console.error('Camera access error:', err);\n        this.cameraError = 'Failed to access camera: ' + err.message;\n      });\n    },\n    stopCamera() {\n      if (this.stream) {\n        this.stream.getTracks().forEach(track => track.stop());\n        this.stream = null;\n      }\n      this.streamActive = false;\n      this.cameraStopped = true;\n    },\n    enterFullscreen(type) {\n      const element = type === 'original' ? this.$refs.cameraVideo : this.$refs.yoloVideo;\n      if (element.requestFullscreen) {\n        element.requestFullscreen();\n      } else if (element.webkitRequestFullscreen) {\n        element.webkitRequestFullscreen();\n      } else if (element.mozRequestFullScreen) {\n        element.mozRequestFullScreen();\n      } else if (element.msRequestFullscreen) {\n        element.msRequestFullscreen();\n      } else {\n        this.$message.warning('Your browser does not support fullscreen mode');\n      }\n    },\n    flipCamera() {\n      this.stopCamera();\n      this.facingMode = this.facingMode === 'environment' ? 'user' : 'environment';\n      this.startCamera();\n    },\n    startYolo() {\n      if (!this.streamActive) {\n        this.yoloError = 'Camera is not active';\n        this.$message.error(this.yoloError);\n        return;\n      }\n      this.yoloActive = true;\n      this.yoloError = null;\n    },\n    stopYolo() {\n      this.yoloActive = false;\n    },\n    toggleYolo() {\n      if (this.yoloActive) {\n        this.stopYolo();\n      } else {\n        this.startYolo();\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","LineChart","name","components","data","realTimeData","loading","fpsChartData","labels","datasets","label","borderColor","fill","tension","fpsChartOptions","responsive","animation","duration","scales","x","display","y","title","text","suggestedMin","suggestedMax","plugins","legend","stream","streamActive","cameraError","cameraStopped","facingMode","yoloActive","yoloError","yoloLoading","dataFetchInterval","created","fetchAllData","setInterval","beforeDestroy","clearInterval","stopCamera","stopYolo","methods","get","then","res","allData","history","now","Date","fiveSecondsAgo","getTime","twoMinutesAgo","realTime","find","item","ts","timestamp","fpsChartDataPoints","filter","map","fps","catch","err","console","error","$message","startCamera","navigator","mediaDevices","getUserMedia","video","audio","videoElement","$refs","cameraVideo","srcObject","src","window","URL","createObjectURL","message","getTracks","forEach","track","stop","enterFullscreen","type","element","yoloVideo","requestFullscreen","webkitRequestFullscreen","mozRequestFullScreen","msRequestFullscreen","warning","flipCamera","startYolo","toggleYolo"],"sources":["src/views/SurveillanceCameraPage.vue"],"sourcesContent":["<template>\n  <div>\n    <h2>Surveillance Camera</h2>\n\n    <!-- Real-time FPS data card -->\n    <el-card class=\"mb-4\">\n      <div slot=\"header\">Real-time Data</div>\n      <div v-if=\"realTimeData && realTimeData.fps !== null\">\n        <p><strong>Current FPS:</strong> {{ realTimeData.fps }} FPS</p>\n        <p><strong>Time:</strong> {{ realTimeData.timestamp }}</p>\n      </div>\n      <div v-else-if=\"loading\">\n        Loading...\n      </div>\n      <div v-else>\n        No real-time data available.\n      </div>\n    </el-card>\n\n    <!-- FPS line chart -->\n    <el-card class=\"mt-4\">\n      <div slot=\"header\">FPS Variation Chart Over Time</div>\n      <line-chart :chart-data=\"fpsChartData\" :chart-options=\"fpsChartOptions\" />\n    </el-card>\n\n    <!-- Dual-camera view -->\n    <div class=\"camera-container\">\n      <!-- Original camera video -->\n      <el-card class=\"camera-card\">\n        <div slot=\"header\" class=\"flex justify-between items-center\">\n          <span>Original Camera Feed</span>\n          <div>\n            <el-button\n              type=\"primary\"\n              size=\"mini\"\n              @click=\"enterFullscreen('original')\"\n              :disabled=\"!streamActive\">\n              Full Screen\n            </el-button>\n            <el-button\n              type=\"danger\"\n              size=\"mini\"\n              @click=\"stopCamera\"\n              :disabled=\"!streamActive\">\n              Stop Camera\n            </el-button>\n            <el-button\n              type=\"info\"\n              size=\"mini\"\n              @click=\"flipCamera\"\n              :disabled=\"!streamActive\">\n              Flip Camera\n            </el-button>\n          </div>\n        </div>\n        <video\n          ref=\"cameraVideo\"\n          width=\"100%\"\n          controls\n          autoplay\n          muted\n          class=\"live-camera\"\n          v-show=\"streamActive\"\n        ></video>\n        <div v-if=\"!streamActive\" class=\"camera-prompt\">\n          <el-button type=\"primary\" @click=\"startCamera\">Enable Camera</el-button>\n          <p class=\"hint\">Camera access required for live feed</p>\n          <p v-if=\"cameraError\" class=\"error\">{{ cameraError }}</p>\n          <p v-if=\"cameraStopped\" class=\"stopped\">Camera has been stopped.</p>\n        </div>\n      </el-card>\n\n      <!-- Processed YOLOv8 video -->\n      <el-card class=\"camera-card\">\n        <div slot=\"header\" class=\"flex justify-between items-center\">\n          <span>YOLOv8 Detection Results</span>\n          <div>\n            <el-button\n              type=\"primary\"\n              size=\"mini\"\n              @click=\"enterFullscreen('processed')\"\n              :disabled=\"!streamActive || !yoloActive\">\n              Full Screen\n            </el-button>\n            <el-button\n              type=\"success\"\n              size=\"mini\"\n              :class=\"{ 'is-loading': yoloLoading }\"\n              @click=\"toggleYolo\"\n              :disabled=\"!streamActive\">\n              {{ yoloActive ? 'Stop Detection' : 'Start Detection' }}\n            </el-button>\n          </div>\n        </div>\n        <img\n          ref=\"yoloVideo\"\n          src=\"http://localhost:5001/video_feed\"\n          width=\"100%\"\n          class=\"live-camera\"\n          v-show=\"streamActive && yoloActive\"\n        />\n        <div v-if=\"!streamActive || !yoloActive\" class=\"camera-prompt\">\n          <p v-if=\"!yoloActive && streamActive\" class=\"hint\">Click \"Start Detection\" to enable YOLOv8 processing</p>\n          <p v-if=\"yoloError\" class=\"error\">{{ yoloError }}</p>\n        </div>\n      </el-card>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\nimport LineChart from '@/components/LineChart.vue'\n\nexport default {\n  name: 'SurveillanceCameraPage',\n  components: {\n    LineChart\n  },\n  data() {\n    return {\n      realTimeData: null,\n      loading: true,\n      fpsChartData: {\n        labels: [],\n        datasets: [\n          {\n            label: 'FPS',\n            data: [],\n            borderColor: '#42A5F5',\n            fill: false,\n            tension: 0.3\n          }\n        ]\n      },\n      fpsChartOptions: {\n        responsive: true,\n        animation: {\n          duration: 500\n        },\n        scales: {\n          x: {\n            display: false\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'FPS'\n            },\n            suggestedMin: 0,\n            suggestedMax: 60\n          }\n        },\n        plugins: {\n          legend: {\n            display: false\n          }\n        }\n      },\n      stream: null,\n      streamActive: false,\n      cameraError: null,\n      cameraStopped: false,\n      facingMode: 'environment',\n      yoloActive: false,\n      yoloError: null,\n      yoloLoading: false,\n      dataFetchInterval: null\n    }\n  },\n  created() {\n    this.fetchAllData()\n    this.dataFetchInterval = setInterval(this.fetchAllData, 5000)\n  },\n  beforeDestroy() {\n    clearInterval(this.dataFetchInterval)\n    this.stopCamera()\n    this.stopYolo()\n  },\n  methods: {\n    fetchAllData() {\n      axios.get('http://localhost:5050/api/history/fps')\n        .then(res => {\n          const allData = res.data.history || []\n          const now = new Date()\n          const fiveSecondsAgo = new Date(now.getTime() - 5000)\n          const twoMinutesAgo = new Date(now.getTime() - 2 * 60 * 1000)\n\n          const realTime = allData.find(item => {\n            const ts = new Date(item.timestamp)\n            return ts >= fiveSecondsAgo\n          })\n\n          const fpsChartDataPoints = allData.filter(item => {\n            const ts = new Date(item.timestamp)\n            return ts >= twoMinutesAgo\n          })\n\n          this.realTimeData = realTime || null\n          this.loading = false\n\n          this.fpsChartData = {\n            labels: fpsChartDataPoints.map(() => ''),\n            datasets: [\n              {\n                label: 'FPS',\n                data: fpsChartDataPoints.map(item => item.fps),\n                borderColor: '#42A5F5',\n                fill: false,\n                tension: 0.3\n              }\n            ]\n          }\n        })\n        .catch(err => {\n          console.error('Failed to fetch data:', err)\n          this.loading = false\n          this.$message.error('Failed to fetch real-time data. Please check your network connection.')\n        })\n    },\n    startCamera() {\n      navigator.mediaDevices.getUserMedia({ video: { facingMode: this.facingMode }, audio: false })\n        .then(stream => {\n          this.stream = stream\n          const videoElement = this.$refs.cameraVideo\n          if ('srcObject' in videoElement) {\n            videoElement.srcObject = stream\n          } else {\n            videoElement.src = window.URL.createObjectURL(stream)\n          }\n          this.streamActive = true\n          this.cameraError = null\n          this.cameraStopped = false\n        })\n        .catch(err => {\n          console.error('Camera access error:', err)\n          this.cameraError = 'Failed to access camera: ' + err.message\n        })\n    },\n    stopCamera() {\n      if (this.stream) {\n        this.stream.getTracks().forEach(track => track.stop())\n        this.stream = null\n      }\n      this.streamActive = false\n      this.cameraStopped = true\n    },\n    enterFullscreen(type) {\n      const element = type === 'original' ? this.$refs.cameraVideo : this.$refs.yoloVideo\n      if (element.requestFullscreen) {\n        element.requestFullscreen()\n      } else if (element.webkitRequestFullscreen) {\n        element.webkitRequestFullscreen()\n      } else if (element.mozRequestFullScreen) {\n        element.mozRequestFullScreen()\n      } else if (element.msRequestFullscreen) {\n        element.msRequestFullscreen()\n      } else {\n        this.$message.warning('Your browser does not support fullscreen mode')\n      }\n    },\n    flipCamera() {\n      this.stopCamera()\n      this.facingMode = this.facingMode === 'environment' ? 'user' : 'environment'\n      this.startCamera()\n    },\n    startYolo() {\n      if (!this.streamActive) {\n        this.yoloError = 'Camera is not active'\n        this.$message.error(this.yoloError)\n        return\n      }\n\n      this.yoloActive = true\n      this.yoloError = null\n    },\n    stopYolo() {\n      this.yoloActive = false\n    },\n    toggleYolo() {\n      if (this.yoloActive) {\n        this.stopYolo()\n      } else {\n        this.startYolo()\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.mb-4 {\n  margin-bottom: 20px;\n}\n.mt-4 {\n  margin-top: 20px;\n}\n.camera-container {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  margin-top: 20px;\n}\n.camera-card {\n  flex: 1 1 calc(50% - 20px);\n  min-width: 300px;\n}\n.camera-prompt {\n  padding: 10px;\n  text-align: center;\n}\n.hint {\n  color: #888;\n  margin-top: 5px;\n}\n.error {\n  color: red;\n  margin-top: 5px;\n}\n.stopped {\n  color: #666;\n  margin-top: 5px;\n  font-style: italic;\n}\n.live-camera {\n  display: block;\n  width: 100%;\n  height: auto;\n  background-color: #000;\n}\n.is-loading .el-button__content::after {\n  content: '';\n  display: inline-block;\n  width: 1em;\n  height: 1em;\n  margin-left: 0.5em;\n  border: 2px solid currentColor;\n  border-radius: 50%;\n  border-right-color: transparent;\n  animation: spin 1s linear infinite;\n  vertical-align: middle;\n}\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}