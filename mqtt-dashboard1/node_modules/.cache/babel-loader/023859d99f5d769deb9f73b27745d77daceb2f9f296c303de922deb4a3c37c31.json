{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport axios from 'axios';\nimport LineChart from '../components/LineChart.vue';\nexport default {\n  name: 'DevicePage',\n  components: {\n    LineChart\n  },\n  data() {\n    return {\n      deviceId: this.$route.params.deviceId || 'sensor1',\n      realTimeData: null,\n      historyData: [],\n      chartData: {\n        labels: [],\n        datasets: [{\n          label: 'Temperature (°C)',\n          data: [],\n          borderColor: '#42A5F5',\n          fill: false,\n          tension: 0.3\n        }]\n      },\n      chartOptions: {\n        responsive: true,\n        animation: {\n          duration: 500\n        },\n        scales: {\n          x: {\n            display: false\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Temperature (°C)'\n            },\n            suggestedMin: 15,\n            suggestedMax: 40\n          }\n        },\n        plugins: {\n          legend: {\n            display: false\n          }\n        }\n      }\n    };\n  },\n  created() {\n    this.fetchAllData();\n    this.interval = setInterval(this.fetchAllData, 5000);\n  },\n  beforeDestroy() {\n    clearInterval(this.interval);\n  },\n  methods: {\n    fetchAllData() {\n      axios.get(`http://localhost:5050/api/history/${this.deviceId}`).then(res => {\n        const allData = res.data.history || [];\n        const now = new Date();\n        const fiveSecondsAgo = new Date(now.getTime() - 5000);\n        const twoMinutesAgo = new Date(now.getTime() - 2 * 60 * 1000);\n        const realTime = allData.find(item => {\n          const ts = new Date(item.timestamp);\n          return ts >= fiveSecondsAgo;\n        });\n        const history = allData.filter(item => {\n          const ts = new Date(item.timestamp);\n          return ts < fiveSecondsAgo;\n        });\n        const chartDataPoints = allData.filter(item => {\n          const ts = new Date(item.timestamp);\n          return ts >= twoMinutesAgo;\n        });\n        this.realTimeData = realTime || null;\n        this.historyData = history.reverse();\n        this.chartData = {\n          labels: chartDataPoints.map(() => ''),\n          datasets: [{\n            label: 'Temperature (°C)',\n            data: chartDataPoints.map(item => item.temperature),\n            borderColor: '#42A5F5',\n            fill: false,\n            tension: 0.3\n          }]\n        };\n      }).catch(err => {\n        console.error('Failed to fetch data:', err);\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","LineChart","name","components","data","deviceId","$route","params","realTimeData","historyData","chartData","labels","datasets","label","borderColor","fill","tension","chartOptions","responsive","animation","duration","scales","x","display","y","title","text","suggestedMin","suggestedMax","plugins","legend","created","fetchAllData","interval","setInterval","beforeDestroy","clearInterval","methods","get","then","res","allData","history","now","Date","fiveSecondsAgo","getTime","twoMinutesAgo","realTime","find","item","ts","timestamp","filter","chartDataPoints","reverse","map","temperature","catch","err","console","error"],"sources":["src/views/DevicePage.vue"],"sourcesContent":["<template>\n  <div>\n    <h2>Air Conditioner</h2>\n\n    <el-card class=\"mb-4\">\n      <div slot=\"header\">Real-time Data</div>\n      <div v-if=\"realTimeData && realTimeData.temperature !== null\">\n        <p><strong>Current Temperature:</strong> {{ realTimeData.temperature }} °C</p>\n        <p><strong>Timestamp:</strong> {{ realTimeData.timestamp }}</p>\n      </div>\n      <div v-else-if=\"realTimeData === null\">\n        Loading...\n      </div>\n      <div v-else>\n        No real-time data available\n      </div>\n    </el-card>\n\n    <el-card>\n      <div slot=\"header\">Historical Data</div>\n      <div style=\"max-height: 300px; overflow-y: auto\">\n        <el-table :data=\"historyData\" border style=\"width: 100%\">\n          <el-table-column prop=\"timestamp\" label=\"Timestamp\" />\n          <el-table-column prop=\"temperature\" label=\"Temperature (°C)\" />\n        </el-table>\n      </div>\n    </el-card>\n\n    <el-card class=\"mt-4\">\n      <div slot=\"header\">Temperature Variation Over the Last 2 Minutes</div>\n      <line-chart :chart-data=\"chartData\" :chart-options=\"chartOptions\" />\n    </el-card>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\nimport LineChart from '../components/LineChart.vue'\n\nexport default {\n  name: 'DevicePage',\n  components: {\n    LineChart\n  },\n  data() {\n    return {\n      deviceId: this.$route.params.deviceId || 'sensor1',\n      realTimeData: null,\n      historyData: [],\n      chartData: {\n        labels: [],\n        datasets: [\n          {\n            label: 'Temperature (°C)',\n            data: [],\n            borderColor: '#42A5F5',\n            fill: false,\n            tension: 0.3\n          }\n        ]\n      },\n      chartOptions: {\n        responsive: true,\n        animation: {\n          duration: 500\n        },\n        scales: {\n          x: {\n            display: false\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Temperature (°C)'\n            },\n            suggestedMin: 15,\n            suggestedMax: 40\n          }\n        },\n        plugins: {\n          legend: {\n            display: false\n          }\n        }\n      }\n    }\n  },\n  created() {\n    this.fetchAllData()\n    this.interval = setInterval(this.fetchAllData, 5000)\n  },\n  beforeDestroy() {\n    clearInterval(this.interval)\n  },\n  methods: {\n    fetchAllData() {\n      axios.get(`http://localhost:5050/api/history/${this.deviceId}`)\n        .then(res => {\n          const allData = res.data.history || []\n\n          const now = new Date()\n          const fiveSecondsAgo = new Date(now.getTime() - 5000)\n          const twoMinutesAgo = new Date(now.getTime() - 2 * 60 * 1000)\n\n          const realTime = allData.find(item => {\n            const ts = new Date(item.timestamp)\n            return ts >= fiveSecondsAgo\n          })\n\n          const history = allData.filter(item => {\n            const ts = new Date(item.timestamp)\n            return ts < fiveSecondsAgo\n          })\n\n          const chartDataPoints = allData.filter(item => {\n            const ts = new Date(item.timestamp)\n            return ts >= twoMinutesAgo\n          })\n\n          this.realTimeData = realTime || null\n          this.historyData = history.reverse()\n\n          this.chartData = {\n            labels: chartDataPoints.map(() => ''),\n            datasets: [\n              {\n                label: 'Temperature (°C)',\n                data: chartDataPoints.map(item => item.temperature),\n                borderColor: '#42A5F5',\n                fill: false,\n                tension: 0.3\n              }\n            ]\n          }\n        })\n        .catch(err => {\n          console.error('Failed to fetch data:', err)\n        })\n    }\n  }\n}\n</script>\n\n<style scoped>\n.mb-4 {\n  margin-bottom: 20px;\n}\n\n.mt-4 {\n  margin-top: 20px;\n}\n</style>\n"],"mappings":";;;;AAoCA,OAAAA,KAAA;AACA,OAAAC,SAAA;AAEA;EACAC,IAAA;EACAC,UAAA;IACAF;EACA;EACAG,KAAA;IACA;MACAC,QAAA,OAAAC,MAAA,CAAAC,MAAA,CAAAF,QAAA;MACAG,YAAA;MACAC,WAAA;MACAC,SAAA;QACAC,MAAA;QACAC,QAAA,GACA;UACAC,KAAA;UACAT,IAAA;UACAU,WAAA;UACAC,IAAA;UACAC,OAAA;QACA;MAEA;MACAC,YAAA;QACAC,UAAA;QACAC,SAAA;UACAC,QAAA;QACA;QACAC,MAAA;UACAC,CAAA;YACAC,OAAA;UACA;UACAC,CAAA;YACAC,KAAA;cACAF,OAAA;cACAG,IAAA;YACA;YACAC,YAAA;YACAC,YAAA;UACA;QACA;QACAC,OAAA;UACAC,MAAA;YACAP,OAAA;UACA;QACA;MACA;IACA;EACA;EACAQ,QAAA;IACA,KAAAC,YAAA;IACA,KAAAC,QAAA,GAAAC,WAAA,MAAAF,YAAA;EACA;EACAG,cAAA;IACAC,aAAA,MAAAH,QAAA;EACA;EACAI,OAAA;IACAL,aAAA;MACAhC,KAAA,CAAAsC,GAAA,2CAAAjC,QAAA,IACAkC,IAAA,CAAAC,GAAA;QACA,MAAAC,OAAA,GAAAD,GAAA,CAAApC,IAAA,CAAAsC,OAAA;QAEA,MAAAC,GAAA,OAAAC,IAAA;QACA,MAAAC,cAAA,OAAAD,IAAA,CAAAD,GAAA,CAAAG,OAAA;QACA,MAAAC,aAAA,OAAAH,IAAA,CAAAD,GAAA,CAAAG,OAAA;QAEA,MAAAE,QAAA,GAAAP,OAAA,CAAAQ,IAAA,CAAAC,IAAA;UACA,MAAAC,EAAA,OAAAP,IAAA,CAAAM,IAAA,CAAAE,SAAA;UACA,OAAAD,EAAA,IAAAN,cAAA;QACA;QAEA,MAAAH,OAAA,GAAAD,OAAA,CAAAY,MAAA,CAAAH,IAAA;UACA,MAAAC,EAAA,OAAAP,IAAA,CAAAM,IAAA,CAAAE,SAAA;UACA,OAAAD,EAAA,GAAAN,cAAA;QACA;QAEA,MAAAS,eAAA,GAAAb,OAAA,CAAAY,MAAA,CAAAH,IAAA;UACA,MAAAC,EAAA,OAAAP,IAAA,CAAAM,IAAA,CAAAE,SAAA;UACA,OAAAD,EAAA,IAAAJ,aAAA;QACA;QAEA,KAAAvC,YAAA,GAAAwC,QAAA;QACA,KAAAvC,WAAA,GAAAiC,OAAA,CAAAa,OAAA;QAEA,KAAA7C,SAAA;UACAC,MAAA,EAAA2C,eAAA,CAAAE,GAAA;UACA5C,QAAA,GACA;YACAC,KAAA;YACAT,IAAA,EAAAkD,eAAA,CAAAE,GAAA,CAAAN,IAAA,IAAAA,IAAA,CAAAO,WAAA;YACA3C,WAAA;YACAC,IAAA;YACAC,OAAA;UACA;QAEA;MACA,GACA0C,KAAA,CAAAC,GAAA;QACAC,OAAA,CAAAC,KAAA,0BAAAF,GAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}