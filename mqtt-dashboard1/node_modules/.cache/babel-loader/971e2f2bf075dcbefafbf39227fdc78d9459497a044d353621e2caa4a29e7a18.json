{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport axios from 'axios';\nimport LineChart from '../components/LightingControllerLineChart.vue';\nimport BarChart from '../components/LightingControllerBarChart.vue';\nexport default {\n  name: 'LightingControllerPage',\n  components: {\n    LineChart,\n    BarChart\n  },\n  data() {\n    return {\n      deviceId: this.$route.params.deviceId || 'lightingController1',\n      realTimeData: null,\n      intensityChartData: {\n        labels: [],\n        datasets: [{\n          label: 'Light Intensity (Lux)',\n          data: [],\n          borderColor: '#FFD700',\n          fill: false,\n          tension: 0.3\n        }]\n      },\n      intensityChartOptions: {\n        responsive: true,\n        animation: {\n          duration: 500\n        },\n        scales: {\n          x: {\n            display: false\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Light Intensity (Lux)'\n            },\n            suggestedMin: 0,\n            suggestedMax: 1000\n          }\n        },\n        plugins: {\n          legend: {\n            display: false\n          }\n        }\n      },\n      switchStatusChartData: {\n        labels: ['On', 'Off'],\n        datasets: [{\n          data: [0, 0],\n          backgroundColor: ['#FFD700', '#FF6B6B']\n        }]\n      },\n      switchStatusChartOptions: {\n        responsive: true,\n        animation: {\n          duration: 500\n        },\n        plugins: {\n          legend: {\n            position: 'bottom'\n          }\n        }\n      }\n    };\n  },\n  created() {\n    this.fetchAllData();\n    this.interval = setInterval(this.fetchAllData, 5000);\n  },\n  beforeDestroy() {\n    clearInterval(this.interval);\n  },\n  methods: {\n    formatIsStarted(row) {\n      return row.status === 'on' ? 'On' : 'Off';\n    },\n    fetchAllData() {\n      axios.get('http://localhost:5050/api/history/light_control').then(res => {\n        const allData = res.data.history || [];\n        const now = new Date();\n        const fiveSecondsAgo = new Date(now.getTime() - 5000);\n        const twoMinutesAgo = new Date(now.getTime() - 2 * 60 * 1000);\n\n        // ✅ 获取最近 5 秒的实时数据\n        const realTime = allData.find(item => {\n          const ts = new Date(item.timestamp);\n          return ts >= fiveSecondsAgo;\n        });\n\n        // ✅ 获取最近 2 分钟的数据用于画图\n        const intensityChartDataPoints = allData.filter(item => {\n          const ts = new Date(item.timestamp);\n          return ts >= twoMinutesAgo;\n        });\n\n        // ⚠️ 设置实时数据到页面展示\n        this.realTimeData = realTime || null;\n\n        // ⚠️ 设置折线图数据\n        this.intensityChartData = {\n          labels: intensityChartDataPoints.map(() => ''),\n          datasets: [{\n            label: 'Light Intensity (Lux)',\n            data: intensityChartDataPoints.map(item => item.intensity),\n            borderColor: '#42A5F5',\n            // 修改为蓝色\n            fill: false,\n            tension: 0.3\n          }]\n        };\n\n        // ✅ 统计过去 1 分钟的状态\n        const allDataInOneMinute = allData.filter(item => {\n          const ts = new Date(item.timestamp);\n          return ts >= new Date(now.getTime() - 60 * 1000);\n        });\n\n        // ⚠️ 根据强度判断状态\n        const tooBrightCount = allDataInOneMinute.filter(item => item.intensity >= 600).length;\n        const tooDarkCount = allDataInOneMinute.filter(item => item.intensity <= 200).length;\n        const offCount = allDataInOneMinute.length - tooBrightCount - tooDarkCount;\n\n        // ⚠️ 更新柱状图数据\n        this.switchStatusChartData = {\n          labels: ['ON (Too Bright)', 'ON (Too Dark)', 'OFF'],\n          datasets: [{\n            label: 'Light Control Status',\n            data: [tooBrightCount, tooDarkCount, offCount],\n            backgroundColor: ['#FFA726', '#66BB6A', '#FF6B6B']\n          }]\n        };\n      }).catch(err => {\n        console.error('Failed to fetch data:', err);\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","LineChart","BarChart","name","components","data","deviceId","$route","params","realTimeData","intensityChartData","labels","datasets","label","borderColor","fill","tension","intensityChartOptions","responsive","animation","duration","scales","x","display","y","title","text","suggestedMin","suggestedMax","plugins","legend","switchStatusChartData","backgroundColor","switchStatusChartOptions","position","created","fetchAllData","interval","setInterval","beforeDestroy","clearInterval","methods","formatIsStarted","row","status","get","then","res","allData","history","now","Date","fiveSecondsAgo","getTime","twoMinutesAgo","realTime","find","item","ts","timestamp","intensityChartDataPoints","filter","map","intensity","allDataInOneMinute","tooBrightCount","length","tooDarkCount","offCount","catch","err","console","error"],"sources":["src/views/LightingControllerPage.vue"],"sourcesContent":["<template> \r\n    <div> \r\n      <h2>Lighting Controller</h2>\r\n      <el-card class=\"mb-4\">\r\n        <div slot=\"header\">Real-time Data</div>\r\n        <div v-if=\"realTimeData && realTimeData.status!== null\">\r\n          <p><strong>Light Control Status:</strong> {{ realTimeData.status === 'on'? 'On' : 'Off' }}</p>\r\n          <p><strong>Current Light Intensity:</strong> {{ realTimeData.intensity }} Lux</p>\r\n          <p><strong>Time:</strong> {{ realTimeData.timestamp }}</p>\r\n        </div>\r\n        <div v-else-if=\"realTimeData === null\">\r\n          Loading...\r\n        </div>\r\n        <div v-else>\r\n          No real-time data available.\r\n        </div>\r\n      </el-card>\r\n      \r\n      <el-card class=\"mt-4\">\r\n        <div slot=\"header\">Light Intensity Variation Chart Over Time</div>\r\n        <line-chart :chart-data=\"intensityChartData\" :chart-options=\"intensityChartOptions\" />\r\n      </el-card>\r\n      \r\n      <el-card class=\"mt-4\">\r\n        <div slot=\"header\">Bar Chart of Light Control Switch Status Proportion</div>\r\n        <div style=\"width: 30%; margin: 0 auto;\">\r\n          <bar-chart :chart-data=\"switchStatusChartData\" :chart-options=\"switchStatusChartOptions\" />\r\n        </div>\r\n      </el-card>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import axios from 'axios';\r\n  import LineChart from '../components/LightingControllerLineChart.vue';\r\n  import BarChart from '../components/LightingControllerBarChart.vue';\r\n  \r\n  export default {\r\n    name: 'LightingControllerPage',\r\n    components: {\r\n      LineChart,\r\n      BarChart\r\n    },\r\n    data() {\r\n      return {\r\n        deviceId: this.$route.params.deviceId || 'lightingController1',\r\n        realTimeData: null,\r\n        intensityChartData: {\r\n          labels: [],\r\n          datasets: [\r\n            {\r\n              label: 'Light Intensity (Lux)',\r\n              data: [],\r\n              borderColor: '#FFD700',\r\n              fill: false,\r\n              tension: 0.3\r\n            }\r\n          ]\r\n        },\r\n        intensityChartOptions: {\r\n          responsive: true,\r\n          animation: {\r\n            duration: 500\r\n          },\r\n          scales: {\r\n            x: {\r\n              display: false\r\n            },\r\n            y: {\r\n              title: {\r\n                display: true,\r\n                text: 'Light Intensity (Lux)'\r\n              },\r\n              suggestedMin: 0,\r\n              suggestedMax: 1000\r\n            }\r\n          },\r\n          plugins: {\r\n            legend: {\r\n              display: false\r\n            }\r\n          }\r\n        },\r\n        switchStatusChartData: {\r\n          labels: ['On', 'Off'],\r\n          datasets: [\r\n            {\r\n              data: [0, 0],\r\n              backgroundColor: ['#FFD700', '#FF6B6B']\r\n            }\r\n          ]\r\n        },\r\n        switchStatusChartOptions: {\r\n          responsive: true,\r\n          animation: {\r\n            duration: 500\r\n          },\r\n          plugins: {\r\n            legend: {\r\n              position: 'bottom'\r\n            }\r\n          }\r\n        }\r\n      };\r\n    },\r\n    created() {\r\n      this.fetchAllData();\r\n      this.interval = setInterval(this.fetchAllData, 5000);\r\n    },\r\n    beforeDestroy() {\r\n      clearInterval(this.interval);\r\n    },\r\n    methods: {\r\n      formatIsStarted(row) {\r\n        return row.status === 'on'? 'On' : 'Off';\r\n      },\r\n      fetchAllData() { \r\n  axios.get('http://localhost:5050/api/history/light_control')\r\n    .then(res => {\r\n      const allData = res.data.history || [];\r\n      const now = new Date();\r\n      const fiveSecondsAgo = new Date(now.getTime() - 5000);\r\n      const twoMinutesAgo = new Date(now.getTime() - 2 * 60 * 1000);\r\n\r\n      // ✅ 获取最近 5 秒的实时数据\r\n      const realTime = allData.find(item => {\r\n        const ts = new Date(item.timestamp);\r\n        return ts >= fiveSecondsAgo;\r\n      });\r\n\r\n      // ✅ 获取最近 2 分钟的数据用于画图\r\n      const intensityChartDataPoints = allData.filter(item => {\r\n        const ts = new Date(item.timestamp);\r\n        return ts >= twoMinutesAgo;\r\n      });\r\n\r\n      // ⚠️ 设置实时数据到页面展示\r\n      this.realTimeData = realTime || null;\r\n\r\n      // ⚠️ 设置折线图数据\r\n      this.intensityChartData = {\r\n        labels: intensityChartDataPoints.map(() => ''),\r\n        datasets: [\r\n          {\r\n            label: 'Light Intensity (Lux)',\r\n            data: intensityChartDataPoints.map(item => item.intensity),\r\n            borderColor: '#42A5F5', // 修改为蓝色\r\n            fill: false,\r\n            tension: 0.3\r\n          }\r\n        ]\r\n      };\r\n\r\n      // ✅ 统计过去 1 分钟的状态\r\n      const allDataInOneMinute = allData.filter(item => {\r\n        const ts = new Date(item.timestamp);\r\n        return ts >= new Date(now.getTime() - 60 * 1000);\r\n      });\r\n\r\n      // ⚠️ 根据强度判断状态\r\n      const tooBrightCount = allDataInOneMinute.filter(item => item.intensity >= 600).length;\r\n      const tooDarkCount = allDataInOneMinute.filter(item => item.intensity <= 200).length;\r\n      const offCount = allDataInOneMinute.length - tooBrightCount - tooDarkCount;\r\n\r\n      // ⚠️ 更新柱状图数据\r\n      this.switchStatusChartData = {\r\n        labels: ['ON (Too Bright)', 'ON (Too Dark)', 'OFF'],\r\n        datasets: [\r\n          {\r\n            label: 'Light Control Status',\r\n            data: [tooBrightCount, tooDarkCount, offCount],\r\n            backgroundColor: ['#FFA726', '#66BB6A', '#FF6B6B']\r\n          }\r\n        ]\r\n      };\r\n    })\r\n    .catch(err => {\r\n      console.error('Failed to fetch data:', err);\r\n    });\r\n}\r\n\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .mb-4 {\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  .mt-4 {\r\n    margin-top: 20px;\r\n  }\r\n  </style>\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}