{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport axios from 'axios';\nimport LineChart from '../components/WaterHeaterLineChart.vue';\nimport PieChart from '../components/WaterHeaterPieChart.vue';\nexport default {\n  name: 'WaterHeaterPage',\n  components: {\n    LineChart,\n    PieChart\n  },\n  data() {\n    return {\n      deviceId: this.$route.params.deviceId || 'waterHeater1',\n      realTimeData: null,\n      temperatureChartData: {\n        labels: [],\n        datasets: [{\n          label: 'Water Temperature (°C)',\n          data: [],\n          borderColor: '#42A5F5',\n          fill: false,\n          tension: 0.3\n        }]\n      },\n      temperatureChartOptions: {\n        responsive: true,\n        animation: {\n          duration: 500\n        },\n        scales: {\n          x: {\n            display: false\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Water Temperature (°C)'\n            },\n            suggestedMin: 0,\n            suggestedMax: 100\n          }\n        },\n        plugins: {\n          legend: {\n            display: false\n          }\n        }\n      },\n      switchStatusChartData: {\n        labels: ['Started', 'Not Started'],\n        datasets: [{\n          data: [0, 0],\n          backgroundColor: ['#42A5F5', '#FF6B6B']\n        }]\n      },\n      switchStatusChartOptions: {\n        responsive: true,\n        animation: {\n          duration: 500\n        },\n        plugins: {\n          legend: {\n            position: 'bottom'\n          }\n        }\n      }\n    };\n  },\n  created() {\n    this.fetchAllData();\n    this.interval = setInterval(this.fetchAllData, 5000);\n  },\n  beforeDestroy() {\n    clearInterval(this.interval);\n  },\n  methods: {\n    formatIsStarted(row) {\n      return row.status === 'running' ? 'Started' : 'Not Started';\n    },\n    fetchAllData() {\n      axios.get('http://localhost:5050/api/history/water_heater').then(res => {\n        const allData = res.data.history || [];\n        const now = new Date();\n        const fiveSecondsAgo = new Date(now.getTime() - 5000);\n        const twoMinutesAgo = new Date(now.getTime() - 2 * 60 * 1000);\n        const realTime = allData.find(item => {\n          const ts = new Date(item.timestamp);\n          return ts >= fiveSecondsAgo;\n        });\n        const temperatureChartDataPoints = allData.filter(item => {\n          const ts = new Date(item.timestamp);\n          return ts >= twoMinutesAgo;\n        });\n        this.realTimeData = realTime || null;\n        this.temperatureChartData = {\n          labels: temperatureChartDataPoints.map(() => ''),\n          datasets: [{\n            label: 'Water Temperature (°C)',\n            data: temperatureChartDataPoints.map(item => item.temperature),\n            borderColor: '#42A5F5',\n            fill: false,\n            tension: 0.3\n          }]\n        };\n        const allDataInOneMinute = allData.filter(item => {\n          const ts = new Date(item.timestamp);\n          return ts >= new Date(now.getTime() - 60 * 1000);\n        });\n        const startedCount = allDataInOneMinute.filter(item => item.status === 'running').length;\n        const notStartedCount = allDataInOneMinute.length - startedCount;\n        this.switchStatusChartData = {\n          labels: ['Started', 'Not Started'],\n          datasets: [{\n            data: [startedCount, notStartedCount],\n            backgroundColor: ['#42A5F5', '#FF6B6B']\n          }]\n        };\n      }).catch(err => {\n        console.error('Failed to fetch data:', err);\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","LineChart","PieChart","name","components","data","deviceId","$route","params","realTimeData","temperatureChartData","labels","datasets","label","borderColor","fill","tension","temperatureChartOptions","responsive","animation","duration","scales","x","display","y","title","text","suggestedMin","suggestedMax","plugins","legend","switchStatusChartData","backgroundColor","switchStatusChartOptions","position","created","fetchAllData","interval","setInterval","beforeDestroy","clearInterval","methods","formatIsStarted","row","status","get","then","res","allData","history","now","Date","fiveSecondsAgo","getTime","twoMinutesAgo","realTime","find","item","ts","timestamp","temperatureChartDataPoints","filter","map","temperature","allDataInOneMinute","startedCount","length","notStartedCount","catch","err","console","error"],"sources":["src/views/WaterHeaterPage.vue"],"sourcesContent":["<template>\n  <div>\n    <h2>Water Heater</h2>\n    <el-card class=\"mb-4\">\n      <div slot=\"header\">Real-time Data</div>\n      <div v-if=\"realTimeData && realTimeData.status!== null\">\n        <p><strong>Is Started:</strong> {{ realTimeData.status === 'running'? 'Started' : 'Not Started' }}</p>\n        <p><strong>Current Water Temperature:</strong> {{ realTimeData.temperature }} °C</p>\n        <p><strong>Time:</strong> {{ realTimeData.timestamp }}</p>\n      </div>\n      <div v-else-if=\"realTimeData === null\">\n        Loading...\n      </div>\n      <div v-else>\n        No real-time data available.\n      </div>\n    </el-card>\n    <el-card class=\"mt-4\">\n      <div slot=\"header\">Water Temperature Variation Chart Over Time</div>\n      <line-chart :chart-data=\"temperatureChartData\" :chart-options=\"temperatureChartOptions\" />\n    </el-card>\n    <el-card class=\"mt-4\">\n      <div slot=\"header\">Pie Chart of Water Heater Switch Status Proportion</div>\n      <div style=\"width: 30%; margin: 0 auto;\">\n        <pie-chart :chart-data=\"switchStatusChartData\" :chart-options=\"switchStatusChartOptions\" />\n      </div>\n    </el-card>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport LineChart from '../components/WaterHeaterLineChart.vue';\nimport PieChart from '../components/WaterHeaterPieChart.vue';\n\nexport default {\n  name: 'WaterHeaterPage',\n  components: {\n    LineChart,\n    PieChart\n  },\n  data() {\n    return {\n      deviceId: this.$route.params.deviceId || 'waterHeater1',\n      realTimeData: null,\n      temperatureChartData: {\n        labels: [],\n        datasets: [\n          {\n            label: 'Water Temperature (°C)',\n            data: [],\n            borderColor: '#42A5F5',\n            fill: false,\n            tension: 0.3\n          }\n        ]\n      },\n      temperatureChartOptions: {\n        responsive: true,\n        animation: {\n          duration: 500\n        },\n        scales: {\n          x: {\n            display: false\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Water Temperature (°C)'\n            },\n            suggestedMin: 0,\n            suggestedMax: 100\n          }\n        },\n        plugins: {\n          legend: {\n            display: false\n          }\n        }\n      },\n      switchStatusChartData: {\n        labels: ['Started', 'Not Started'],\n        datasets: [\n          {\n            data: [0, 0],\n            backgroundColor: ['#42A5F5', '#FF6B6B']\n          }\n        ]\n      },\n      switchStatusChartOptions: {\n        responsive: true,\n        animation: {\n          duration: 500\n        },\n        plugins: {\n          legend: {\n            position: 'bottom'\n          }\n        }\n      }\n    };\n  },\n  created() {\n    this.fetchAllData();\n    this.interval = setInterval(this.fetchAllData, 5000);\n  },\n  beforeDestroy() {\n    clearInterval(this.interval);\n  },\n  methods: {\n    formatIsStarted(row) {\n      return row.status === 'running'? 'Started' : 'Not Started';\n    },\n    fetchAllData() {\n      axios.get('http://localhost:5050/api/history/water_heater')\n        .then(res => {\n          const allData = res.data.history || [];\n          const now = new Date();\n          const fiveSecondsAgo = new Date(now.getTime() - 5000);\n          const twoMinutesAgo = new Date(now.getTime() - 2 * 60 * 1000);\n\n          const realTime = allData.find(item => {\n            const ts = new Date(item.timestamp);\n            return ts >= fiveSecondsAgo;\n          });\n\n          const temperatureChartDataPoints = allData.filter(item => {\n            const ts = new Date(item.timestamp);\n            return ts >= twoMinutesAgo;\n          });\n\n          this.realTimeData = realTime || null;\n\n          this.temperatureChartData = {\n            labels: temperatureChartDataPoints.map(() => ''),\n            datasets: [\n              {\n                label: 'Water Temperature (°C)',\n                data: temperatureChartDataPoints.map(item => item.temperature),\n                borderColor: '#42A5F5',\n                fill: false,\n                tension: 0.3\n              }\n            ]\n          };\n\n          const allDataInOneMinute = allData.filter(item => {\n            const ts = new Date(item.timestamp);\n            return ts >= new Date(now.getTime() - 60 * 1000);\n          });\n          const startedCount = allDataInOneMinute.filter(item => item.status === 'running').length;\n          const notStartedCount = allDataInOneMinute.length - startedCount;\n\n          this.switchStatusChartData = {\n            labels: ['Started', 'Not Started'],\n            datasets: [\n              {\n                data: [startedCount, notStartedCount],\n                backgroundColor: ['#42A5F5', '#FF6B6B']\n              }\n            ]\n          };\n        })\n        .catch(err => {\n          console.error('Failed to fetch data:', err);\n        });\n    }\n  }\n};\n</script>\n\n<style scoped>\n.mb-4 {\n  margin-bottom: 20px;\n}\n\n.mt-4 {\n  margin-top: 20px;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}