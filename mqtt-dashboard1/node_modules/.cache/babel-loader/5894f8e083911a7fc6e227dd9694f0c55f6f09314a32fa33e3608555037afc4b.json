{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  name: 'LoginPage',\n  data() {\n    return {\n      showRegister: false,\n      loginForm: {\n        username: '',\n        password: ''\n      },\n      registerForm: {\n        username: '',\n        password: '',\n        confirm: '',\n        phone: '',\n        email: '',\n        idNumber: '',\n        homeAddress: '',\n        company: '',\n        companyAddress: ''\n      },\n      loading: {\n        login: false,\n        register: false\n      },\n      loginRules: {\n        username: [{\n          required: true,\n          message: 'Please enter username',\n          trigger: 'blur'\n        }],\n        password: [{\n          required: true,\n          message: 'Please enter password',\n          trigger: 'blur'\n        }]\n      },\n      registerRules: {\n        username: [{\n          required: true,\n          message: 'Please enter username',\n          trigger: 'blur'\n        }, {\n          min: 3,\n          max: 20,\n          message: 'Length must be 3-20 characters',\n          trigger: 'blur'\n        }, {\n          pattern: /^\\w+$/,\n          message: 'Only letters, numbers, and _ allowed',\n          trigger: 'blur'\n        }],\n        password: [{\n          required: true,\n          message: 'Please enter password',\n          trigger: 'blur'\n        }, {\n          min: 8,\n          message: 'At least 8 characters',\n          trigger: 'blur'\n        }, {\n          pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&]).{8,}$/,\n          message: 'Must contain uppercase, lowercase, number, and special character',\n          trigger: 'blur'\n        }],\n        confirm: [{\n          required: true,\n          message: 'Please confirm password',\n          trigger: 'blur'\n        }, {\n          validator: (rule, value, callback) => {\n            if (value !== this.registerForm.password) {\n              callback(new Error('Passwords do not match'));\n            } else {\n              callback();\n            }\n          },\n          trigger: 'blur'\n        }],\n        phone: [{\n          required: true,\n          message: 'Please enter phone number',\n          trigger: 'blur'\n        }, {\n          pattern: /^1[3-9]\\d{9}$/,\n          message: 'Invalid phone number format',\n          trigger: 'blur'\n        }],\n        email: [{\n          required: true,\n          message: 'Please enter email address',\n          trigger: 'blur'\n        }, {\n          type: 'email',\n          message: 'Invalid email address format',\n          trigger: 'blur'\n        }],\n        idNumber: [{\n          required: true,\n          message: 'Please enter ID number',\n          trigger: 'blur'\n        }, {\n          pattern: /^\\d{15}(\\d{2}[\\dxX])?$/,\n          message: 'Invalid ID number format',\n          trigger: 'blur'\n        }],\n        homeAddress: [{\n          required: true,\n          message: 'Please enter home address',\n          trigger: 'blur'\n        }, {\n          min: 5,\n          message: 'Home address must be at least 5 characters',\n          trigger: 'blur'\n        }],\n        company: [{\n          required: true,\n          message: 'Please enter company name',\n          trigger: 'blur'\n        }, {\n          min: 2,\n          message: 'Company name must be at least 2 characters',\n          trigger: 'blur'\n        }],\n        companyAddress: [{\n          required: true,\n          message: 'Please enter company address',\n          trigger: 'blur'\n        }, {\n          min: 5,\n          message: 'Company address must be at least 5 characters',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  methods: {\n    // Add submitLogin method\n    async submitLogin() {\n      this.loading.login = true;\n      try {\n        await this.$refs.loginFormRef.validate(); // 验证表单\n        const response = await axios.post('http://localhost:5050/login', this.loginForm);\n        this.$message.success(response.data.message || 'Login successful');\n        localStorage.setItem('loggedIn', 'true');\n        localStorage.setItem('username', this.loginForm.username);\n        this.$router.push('/home');\n      } catch (err) {\n        console.error(\"❌ 登录失败:\", err.message);\n        this.$message.error(err.response?.data?.message || 'Login failed');\n      } finally {\n        this.loading.login = false;\n      }\n    },\n    openRegister() {\n      this.showRegister = true;\n      this.$nextTick(() => {\n        this.$refs.registerFormRef.resetFields();\n      });\n    },\n    closeRegister() {\n      this.showRegister = false;\n      this.$refs.registerFormRef.resetFields();\n    },\n    async submitRegister() {\n      this.loading.register = true;\n      try {\n        // Validate if the form passes the validation\n        const valid = await this.$refs.registerFormRef.validate();\n        if (!valid) {\n          console.warn(\"❌ 表单验证未通过，阻止提交\");\n          this.loading.register = false;\n          return;\n        }\n        console.log(\"👉 提交的数据:\", this.registerForm);\n\n        // Send a request\n        const response = await axios.post('http://localhost:5050/register', this.registerForm);\n        console.log(\"✅ 注册成功，后端返回:\", response.data);\n        this.$message.success(response.data.message || 'Registration successful');\n        this.closeRegister();\n      } catch (err) {\n        if (err.response) {\n          console.error(\"❌ 后端返回的错误信息:\", err.response.data);\n          this.$message.error(err.response.data.message || 'Registration failed');\n        } else {\n          console.error(\"❌ 未知错误:\", err.message);\n        }\n      } finally {\n        this.loading.register = false;\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","showRegister","loginForm","username","password","registerForm","confirm","phone","email","idNumber","homeAddress","company","companyAddress","loading","login","register","loginRules","required","message","trigger","registerRules","min","max","pattern","validator","rule","value","callback","Error","type","methods","submitLogin","$refs","loginFormRef","validate","response","post","$message","success","localStorage","setItem","$router","push","err","console","error","openRegister","$nextTick","registerFormRef","resetFields","closeRegister","submitRegister","valid","warn","log"],"sources":["src/views/LoginPage.vue"],"sourcesContent":["<template>\n  <div class=\"login-container\">\n    <!-- Login Card -->\n    <el-card class=\"login-card\" v-if=\"!showRegister\">\n      <h2 class=\"login-title\">Smart Home System Login</h2>\n      <el-form :model=\"loginForm\" :rules=\"loginRules\" ref=\"loginFormRef\" label-width=\"100px\">\n        <el-form-item label=\"Username\" prop=\"username\">\n          <el-input v-model=\"loginForm.username\" placeholder=\"Enter your username\" clearable />\n        </el-form-item>\n        <el-form-item label=\"Password\" prop=\"password\">\n          <el-input v-model=\"loginForm.password\" type=\"password\" placeholder=\"Enter your password\" clearable />\n        </el-form-item>\n        <div class=\"login-btns\">\n          <el-button type=\"primary\" @click=\"submitLogin\" :loading=\"loading.login\">Login</el-button>\n          <el-button type=\"success\" @click=\"openRegister\">Register</el-button>\n        </div>\n      </el-form>\n    </el-card>\n\n    <!-- Register Modal -->\n    <div class=\"register-overlay\" v-if=\"showRegister\">\n      <el-card class=\"register-card\">\n        <h2 style=\"text-align: center\">Register New Account</h2>\n        <el-form :model=\"registerForm\" :rules=\"registerRules\" ref=\"registerFormRef\" label-width=\"130px\">\n          <el-form-item label=\"Username\" prop=\"username\">\n            <el-input v-model=\"registerForm.username\" placeholder=\"Enter username\" clearable />\n          </el-form-item>\n          <el-form-item label=\"Password\" prop=\"password\">\n            <el-input v-model=\"registerForm.password\" type=\"password\" placeholder=\"Enter password\" clearable />\n          </el-form-item>\n          <el-form-item label=\"Confirm Password\" prop=\"confirm\">\n            <el-input v-model=\"registerForm.confirm\" type=\"password\" placeholder=\"Re-enter password\" clearable />\n          </el-form-item>\n          <el-form-item label=\"Phone\" prop=\"phone\">\n            <el-input v-model=\"registerForm.phone\" placeholder=\"Enter phone number\" clearable />\n          </el-form-item>\n          <el-form-item label=\"Email\" prop=\"email\">\n            <el-input v-model=\"registerForm.email\" placeholder=\"Enter email address\" clearable />\n          </el-form-item>\n          <el-form-item label=\"ID Number\" prop=\"idNumber\">\n            <el-input v-model=\"registerForm.idNumber\" placeholder=\"Enter ID number\" clearable />\n          </el-form-item>\n          <el-form-item label=\"Home Address\" prop=\"homeAddress\">\n            <el-input v-model=\"registerForm.homeAddress\" placeholder=\"Enter home address\" clearable />\n          </el-form-item>\n          <el-form-item label=\"Company Name\" prop=\"company\">\n            <el-input v-model=\"registerForm.company\" placeholder=\"Enter company name\" clearable />\n          </el-form-item>\n          <el-form-item label=\"Company Address\" prop=\"companyAddress\">\n            <el-input v-model=\"registerForm.companyAddress\" placeholder=\"Enter company address\" clearable />\n          </el-form-item>\n          <el-form-item>\n            <el-button type=\"primary\" @click=\"submitRegister\" :loading=\"loading.register\">Submit</el-button>\n            <el-button @click=\"closeRegister\">Back</el-button>\n          </el-form-item>\n        </el-form>\n      </el-card>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'LoginPage',\n  data() {\n    return {\n      showRegister: false,\n      loginForm: { username: '', password: '' },\n      registerForm: {\n        username: '', password: '', confirm: '', phone: '', email: '',\n        idNumber: '', homeAddress: '', company: '', companyAddress: ''\n      },\n      loading: { login: false, register: false },\n      loginRules: {\n        username: [{ required: true, message: 'Please enter username', trigger: 'blur' }],\n        password: [{ required: true, message: 'Please enter password', trigger: 'blur' }]\n      },\n      registerRules: {\n        username: [\n          { required: true, message: 'Please enter username', trigger: 'blur' },\n          { min: 3, max: 20, message: 'Length must be 3-20 characters', trigger: 'blur' },\n          { pattern: /^\\w+$/, message: 'Only letters, numbers, and _ allowed', trigger: 'blur' }\n        ],\n        password: [\n          { required: true, message: 'Please enter password', trigger: 'blur' },\n          { min: 8, message: 'At least 8 characters', trigger: 'blur' },\n          { pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&]).{8,}$/, \n            message: 'Must contain uppercase, lowercase, number, and special character', trigger: 'blur' }\n        ],\n        confirm: [\n          { required: true, message: 'Please confirm password', trigger: 'blur' },\n          {\n            validator: (rule, value, callback) => {\n              if (value !== this.registerForm.password) {\n                callback(new Error('Passwords do not match'));\n              } else {\n                callback();\n              }\n            },\n            trigger: 'blur'\n          }\n        ],\n        phone: [\n          { required: true, message: 'Please enter phone number', trigger: 'blur' },\n          { pattern: /^1[3-9]\\d{9}$/, message: 'Invalid phone number format', trigger: 'blur' }\n        ],\n        email: [\n          { required: true, message: 'Please enter email address', trigger: 'blur' },\n          { type: 'email', message: 'Invalid email address format', trigger: 'blur' }\n        ],\n        idNumber: [\n          { required: true, message: 'Please enter ID number', trigger: 'blur' },\n          { pattern: /^\\d{15}(\\d{2}[\\dxX])?$/, message: 'Invalid ID number format', trigger: 'blur' }\n        ],\n        homeAddress: [\n          { required: true, message: 'Please enter home address', trigger: 'blur' },\n          { min: 5, message: 'Home address must be at least 5 characters', trigger: 'blur' }\n        ],\n        company: [\n          { required: true, message: 'Please enter company name', trigger: 'blur' },\n          { min: 2, message: 'Company name must be at least 2 characters', trigger: 'blur' }\n        ],\n        companyAddress: [\n          { required: true, message: 'Please enter company address', trigger: 'blur' },\n          { min: 5, message: 'Company address must be at least 5 characters', trigger: 'blur' }\n        ]\n      }\n    }\n  },\n  methods: {\n    // Add submitLogin method\n    async submitLogin() {\n      this.loading.login = true;\n      try {\n        await this.$refs.loginFormRef.validate(); // 验证表单\n        const response = await axios.post('http://localhost:5050/login', this.loginForm);\n        this.$message.success(response.data.message || 'Login successful');\n        localStorage.setItem('loggedIn', 'true');\n        localStorage.setItem('username', this.loginForm.username);\n        this.$router.push('/home');\n      } catch (err) {\n        console.error(\"❌ 登录失败:\", err.message);\n        this.$message.error(err.response?.data?.message || 'Login failed');\n      } finally {\n        this.loading.login = false;\n      }\n    },\n    openRegister() {\n      this.showRegister = true;\n      this.$nextTick(() => {\n        this.$refs.registerFormRef.resetFields();\n      });\n    },\n    closeRegister() {\n      this.showRegister = false;\n      this.$refs.registerFormRef.resetFields();\n    },\n    async submitRegister() {\n      this.loading.register = true;\n      try {\n        // Validate if the form passes the validation\n        const valid = await this.$refs.registerFormRef.validate();\n        if (!valid) {\n          console.warn(\"❌ 表单验证未通过，阻止提交\");\n          this.loading.register = false;\n          return;\n        }\n\n        console.log(\"👉 提交的数据:\", this.registerForm);\n\n        // Send a request\n        const response = await axios.post('http://localhost:5050/register', this.registerForm);\n\n        console.log(\"✅ 注册成功，后端返回:\", response.data);\n\n        this.$message.success(response.data.message || 'Registration successful');\n        this.closeRegister();\n      } catch (err) {\n        if (err.response) {\n          console.error(\"❌ 后端返回的错误信息:\", err.response.data);\n          this.$message.error(err.response.data.message || 'Registration failed');\n        } else {\n          console.error(\"❌ 未知错误:\", err.message);\n        }\n      } finally {\n        this.loading.register = false;\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* 登录和注册容器样式 */\n.login-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  background: #f0f2f5;\n  position: relative;\n}\n\n/* 登录卡片样式 */\n.login-card {\n  width: 420px;\n  padding: 30px 20px;\n  background: #fff;\n  border-radius: 10px;\n  box-shadow: 0 4px 24px rgba(0, 0, 0, 0.08);\n  z-index: 1;\n  transition: all 0.3s ease;\n}\n\n.login-title {\n  text-align: center;\n  margin-bottom: 20px;\n}\n\n.login-btns {\n  display: flex;\n  justify-content: space-around;\n}\n\n/* 注册卡片的弹出动画 */\n.register-overlay {\n  position: absolute;\n  width: 620px;\n  max-width: 90%;\n  background: #fff;\n  z-index: 2;\n  padding: 30px;\n  border-radius: 10px;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.15);\n  animation: slideIn 0.3s ease forwards;\n}\n\n/* 注册卡片内部的样式 */\n.register-card {\n  width: 100%;\n}\n\n/* 弹出动画 */\n@keyframes slideIn {\n  0% {\n    transform: translateY(-20px);\n    opacity: 0;\n  }\n  100% {\n    transform: translateY(0);\n    opacity: 1;\n  }\n}\n\n/* 按钮 hover 效果 */\n.el-button {\n  transition: background-color 0.3s;\n}\n\n.el-button:hover {\n  background-color: #409EFF !important;\n  color: white !important;\n}\n\n/* 🔥 优化后的错误提示样式 */\n.el-form-item__error {\n  color: #f56c6c !important;\n  font-size: 13px;\n  margin-top: 3px;\n  font-weight: 500;\n  display: flex;\n  align-items: center;\n}\n\n/* 🚀 增加一个小警告图标 */\n.el-form-item__error::before {\n  content: \"⚠️ \";\n  margin-right: 5px;\n}\n\n/* 🔥 输入框的错误状态显示更清晰 */\n.el-input.is-error input {\n  border-color: #f56c6c !important;\n  background-color: #fff5f5 !important;\n  box-shadow: 0 0 5px rgba(245, 108, 108, 0.3);\n}\n\n/* 🌟 鼠标悬浮时的错误状态效果 */\n.el-input.is-error input:hover {\n  border-color: #e53e3e !important;\n}\n\n/* ✅ 修正输入框焦点状态 */\n.el-input input:focus {\n  border-color: #409eff !important;\n  box-shadow: 0 0 5px rgba(64, 158, 255, 0.3);\n}\n\n/* 对小屏幕的适配 */\n@media (max-width: 768px) {\n  .login-card {\n    width: 90%;\n  }\n\n  .register-overlay {\n    width: 90%;\n  }\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}