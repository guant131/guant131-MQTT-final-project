{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      historyData: [],\n      displayedHistoryData: [],\n      maxTemperature: null,\n      maxTemperatureTime: null,\n      maxTemperatureStatus: null,\n      minTemperature: null,\n      minTemperatureTime: null,\n      minTemperatureStatus: null,\n      searchTime: '',\n      searchResult: null,\n      searchPerformed: false\n    };\n  },\n  created() {\n    this.fetchHistoryData();\n  },\n  methods: {\n    formatIsStarted(row) {\n      return row.status === 'running' ? 'Started' : 'Not Started';\n    },\n    fetchHistoryData() {\n      axios.get('http://localhost:5050/api/history/water_heater').then(res => {\n        this.historyData = res.data.history || [];\n        this.displayedHistoryData = this.historyData.slice(0, 30);\n        this.calculateTemperatureInfo();\n      }).catch(err => {\n        console.error('Failed to fetch history data:', err);\n      });\n    },\n    goBack() {\n      this.$router.back();\n    },\n    calculateTemperatureInfo() {\n      if (this.historyData.length === 0) {\n        return;\n      }\n      let maxTemp = this.historyData[0].temperature;\n      let maxTempTime = this.historyData[0].timestamp;\n      let maxTempStatus = this.historyData[0].status;\n      let minTemp = this.historyData[0].temperature;\n      let minTempTime = this.historyData[0].timestamp;\n      let minTempStatus = this.historyData[0].status;\n      for (let data of this.historyData) {\n        if (data.temperature > maxTemp) {\n          maxTemp = data.temperature;\n          maxTempTime = data.timestamp;\n          maxTempStatus = data.status;\n        }\n        if (data.temperature < minTemp) {\n          minTemp = data.temperature;\n          minTempTime = data.timestamp;\n          minTempStatus = data.status;\n        }\n      }\n      this.maxTemperature = maxTemp;\n      this.maxTemperatureTime = maxTempTime;\n      this.maxTemperatureStatus = maxTempStatus;\n      this.minTemperature = minTemp;\n      this.minTemperatureTime = minTempTime;\n      this.minTemperatureStatus = minTempStatus;\n    },\n    searchByTime() {\n      this.searchPerformed = true;\n      this.searchResult = this.historyData.find(data => data.timestamp === this.searchTime);\n    }\n  }\n};","map":{"version":3,"names":["axios","data","historyData","displayedHistoryData","maxTemperature","maxTemperatureTime","maxTemperatureStatus","minTemperature","minTemperatureTime","minTemperatureStatus","searchTime","searchResult","searchPerformed","created","fetchHistoryData","methods","formatIsStarted","row","status","get","then","res","history","slice","calculateTemperatureInfo","catch","err","console","error","goBack","$router","back","length","maxTemp","temperature","maxTempTime","timestamp","maxTempStatus","minTemp","minTempTime","minTempStatus","searchByTime","find"],"sources":["src/views/WaterHeaterHistory.vue"],"sourcesContent":["<template>\n  <div>\n    <div class=\"header-container\">\n      <h2>Water Heater History Data</h2>\n      <el-button size=\"small\" type=\"primary\" @click=\"fetchHistoryData\">Refresh</el-button>\n    </div>\n    <!-- Newly added temperature information window -->\n    <el-card class=\"temperature-info-card\">\n      <div slot=\"header\">Temperature Information</div>\n      <div class=\"info-content\">\n        <p>Max Temperature: {{ maxTemperature }}째C at {{ maxTemperatureTime }} (Status: {{ maxTemperatureStatus }})</p>\n        <p>Min Temperature: {{ minTemperature }}째C at {{ minTemperatureTime }} (Status: {{ minTemperatureStatus }})</p>\n      </div>\n    </el-card>\n    <!-- Newly added time search window -->\n    <el-card class=\"search-info-card\">\n      <div slot=\"header\">Search by Time</div>\n      <div class=\"info-content\">\n        <el-input v-model=\"searchTime\" placeholder=\"Enter timestamp\" @keyup.enter=\"searchByTime\"></el-input>\n        <el-button @click=\"searchByTime\">Search</el-button>\n        <p v-if=\"searchResult\">Temperature: {{ searchResult.temperature }}째C, Status: {{ formatIsStarted(searchResult) }}</p>\n        <p v-else-if=\"searchPerformed &&!searchResult\">No data found for the given time.</p>\n      </div>\n    </el-card>\n    <el-card>\n      <div slot=\"header\">History Data List</div>\n      <div class=\"history-data-scroll\">\n        <table class=\"history-table\">\n          <thead>\n            <tr>\n              <th>Status</th>\n              <th>Temperature (째C)</th>\n              <th>Time</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr v-for=\"(data, index) in displayedHistoryData\" :key=\"index\">\n              <td>{{ formatIsStarted(data) }}</td>\n              <td>{{ data.temperature }}</td>\n              <td>{{ data.timestamp }}</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </el-card>\n    <div class=\"back-container\">\n      <el-button type=\"primary\" round @click=\"goBack\">Back</el-button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      historyData: [],\n      displayedHistoryData: [],\n      maxTemperature: null,\n      maxTemperatureTime: null,\n      maxTemperatureStatus: null,\n      minTemperature: null,\n      minTemperatureTime: null,\n      minTemperatureStatus: null,\n      searchTime: '',\n      searchResult: null,\n      searchPerformed: false\n    };\n  },\n  created() {\n    this.fetchHistoryData();\n  },\n  methods: {\n    formatIsStarted(row) {\n      return row.status === 'running' ? 'Started' : 'Not Started';\n    },\n    fetchHistoryData() {\n      axios.get('http://localhost:5050/api/history/water_heater')\n        .then(res => {\n          this.historyData = res.data.history || [];\n          this.displayedHistoryData = this.historyData.slice(0, 30);\n          this.calculateTemperatureInfo();\n        })\n        .catch(err => {\n          console.error('Failed to fetch history data:', err);\n        });\n    },\n    goBack() {\n      this.$router.back();\n    },\n    calculateTemperatureInfo() {\n      if (this.historyData.length === 0) {\n        return;\n      }\n      let maxTemp = this.historyData[0].temperature;\n      let maxTempTime = this.historyData[0].timestamp;\n      let maxTempStatus = this.historyData[0].status;\n      let minTemp = this.historyData[0].temperature;\n      let minTempTime = this.historyData[0].timestamp;\n      let minTempStatus = this.historyData[0].status;\n\n      for (let data of this.historyData) {\n        if (data.temperature > maxTemp) {\n          maxTemp = data.temperature;\n          maxTempTime = data.timestamp;\n          maxTempStatus = data.status;\n        }\n        if (data.temperature < minTemp) {\n          minTemp = data.temperature;\n          minTempTime = data.timestamp;\n          minTempStatus = data.status;\n        }\n      }\n\n      this.maxTemperature = maxTemp;\n      this.maxTemperatureTime = maxTempTime;\n      this.maxTemperatureStatus = maxTempStatus;\n      this.minTemperature = minTemp;\n      this.minTemperatureTime = minTempTime;\n      this.minTemperatureStatus = minTempStatus;\n    },\n    searchByTime() {\n      this.searchPerformed = true;\n      this.searchResult = this.historyData.find(data => data.timestamp === this.searchTime);\n    }\n  }\n};\n</script>\n\n<style scoped>\n.header-container {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 20px;\n}\n\n.temperature-info-card,\n.search-info-card {\n  margin-bottom: 20px;\n}\n\n.info-content {\n  padding: 10px;\n}\n\n.history-data-scroll {\n  max-height: 400px;\n  overflow-y: auto;\n}\n\n.history-table {\n  width: 100%;\n  border-collapse: collapse;\n}\n\n.history-table th,\n.history-table td {\n  border: 1px solid #ccc;\n  padding: 8px;\n  text-align: center;\n}\n\n.back-container {\n  margin-top: 40px;\n  text-align: center;\n}\n</style>"],"mappings":";;AAoDA,OAAAA,KAAA;AAEA;EACAC,KAAA;IACA;MACAC,WAAA;MACAC,oBAAA;MACAC,cAAA;MACAC,kBAAA;MACAC,oBAAA;MACAC,cAAA;MACAC,kBAAA;MACAC,oBAAA;MACAC,UAAA;MACAC,YAAA;MACAC,eAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,gBAAA;EACA;EACAC,OAAA;IACAC,gBAAAC,GAAA;MACA,OAAAA,GAAA,CAAAC,MAAA;IACA;IACAJ,iBAAA;MACAd,KAAA,CAAAmB,GAAA,mDACAC,IAAA,CAAAC,GAAA;QACA,KAAAnB,WAAA,GAAAmB,GAAA,CAAApB,IAAA,CAAAqB,OAAA;QACA,KAAAnB,oBAAA,QAAAD,WAAA,CAAAqB,KAAA;QACA,KAAAC,wBAAA;MACA,GACAC,KAAA,CAAAC,GAAA;QACAC,OAAA,CAAAC,KAAA,kCAAAF,GAAA;MACA;IACA;IACAG,OAAA;MACA,KAAAC,OAAA,CAAAC,IAAA;IACA;IACAP,yBAAA;MACA,SAAAtB,WAAA,CAAA8B,MAAA;QACA;MACA;MACA,IAAAC,OAAA,QAAA/B,WAAA,IAAAgC,WAAA;MACA,IAAAC,WAAA,QAAAjC,WAAA,IAAAkC,SAAA;MACA,IAAAC,aAAA,QAAAnC,WAAA,IAAAgB,MAAA;MACA,IAAAoB,OAAA,QAAApC,WAAA,IAAAgC,WAAA;MACA,IAAAK,WAAA,QAAArC,WAAA,IAAAkC,SAAA;MACA,IAAAI,aAAA,QAAAtC,WAAA,IAAAgB,MAAA;MAEA,SAAAjB,IAAA,SAAAC,WAAA;QACA,IAAAD,IAAA,CAAAiC,WAAA,GAAAD,OAAA;UACAA,OAAA,GAAAhC,IAAA,CAAAiC,WAAA;UACAC,WAAA,GAAAlC,IAAA,CAAAmC,SAAA;UACAC,aAAA,GAAApC,IAAA,CAAAiB,MAAA;QACA;QACA,IAAAjB,IAAA,CAAAiC,WAAA,GAAAI,OAAA;UACAA,OAAA,GAAArC,IAAA,CAAAiC,WAAA;UACAK,WAAA,GAAAtC,IAAA,CAAAmC,SAAA;UACAI,aAAA,GAAAvC,IAAA,CAAAiB,MAAA;QACA;MACA;MAEA,KAAAd,cAAA,GAAA6B,OAAA;MACA,KAAA5B,kBAAA,GAAA8B,WAAA;MACA,KAAA7B,oBAAA,GAAA+B,aAAA;MACA,KAAA9B,cAAA,GAAA+B,OAAA;MACA,KAAA9B,kBAAA,GAAA+B,WAAA;MACA,KAAA9B,oBAAA,GAAA+B,aAAA;IACA;IACAC,aAAA;MACA,KAAA7B,eAAA;MACA,KAAAD,YAAA,QAAAT,WAAA,CAAAwC,IAAA,CAAAzC,IAAA,IAAAA,IAAA,CAAAmC,SAAA,UAAA1B,UAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}