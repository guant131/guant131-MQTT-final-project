{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  name: 'HomePage',\n  data() {\n    return {\n      userInput: '',\n      chatMessages: [],\n      isChatWindowVisible: false,\n      apiKey: 'a104e834-a3c5-4760-a819-2e4dd8de484d',\n      modelId: 'doubao-1-5-thinking-pro-250415',\n      apiUrl: 'https://ark.cn-beijing.volces.com/api/v3/chat/completions'\n    };\n  },\n  async mounted() {\n    try {\n      const requestData = {\n        model: this.modelId,\n        messages: [{\n          role: 'system',\n          content: 'You are a smart home assistant. Say hello to the user and introduce. Answer in English.'\n        }]\n      };\n      console.log('Sending initial request data:', requestData);\n      const response = await axios.post(this.apiUrl, requestData, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.apiKey}`\n        }\n      });\n      console.log('Received initial response:', response.data);\n      const aiReply = response.data.choices[0].message.content;\n      this.chatMessages.push({\n        sender: 'ai',\n        content: aiReply\n      });\n    } catch (error) {\n      console.error('Initial API call failed:', error);\n      if (error.response) {\n        console.error('Response data:', error.response.data);\n        console.error('Response status:', error.response.status);\n        console.error('Response headers:', error.response.headers);\n      } else if (error.request) {\n        console.error('No response received:', error.request);\n      } else {\n        console.error('Error setting up the request:', error.message);\n      }\n      this.chatMessages.push({\n        sender: 'ai',\n        content: 'Sorry, the service is temporarily unavailable. Please try again later.'\n      });\n    } finally {\n      this.$nextTick(() => {\n        this.$refs.chatMessages.scrollTop = this.$refs.chatMessages.scrollHeight;\n      });\n    }\n  },\n  methods: {\n    logout() {\n      localStorage.removeItem('loggedIn');\n      this.$router.push('/login');\n    },\n    goToRealTimeStatus() {\n      console.log('Navigating to real-time status...');\n      if (this.$route.path !== '/real-time-status') {\n        this.$router.push('/real-time-status');\n      }\n    },\n    goToDataHistory() {\n      if (this.$route.path !== '/data-history') {\n        this.$router.push('/data-history');\n      }\n    },\n    goToDeviceControl() {\n      if (this.$route.path !== '/device-control') {\n        this.$router.push('/device-control');\n      }\n    },\n    toggleChatWindow() {\n      this.isChatWindowVisible = !this.isChatWindowVisible;\n    },\n    async sendMessage() {\n      if (!this.userInput.trim()) return;\n      this.chatMessages.push({\n        sender: 'user',\n        content: this.userInput\n      });\n      try {\n        const requestData = {\n          model: this.modelId,\n          messages: [{\n            role: 'system',\n            content: 'You are a smart home assistant. Answer all questions in English regarding device control and data query.'\n          }, {\n            role: 'user',\n            content: this.userInput\n          }]\n        };\n        console.log('Sending request data:', requestData);\n        const response = await axios.post(this.apiUrl, requestData, {\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${this.apiKey}`\n          }\n        });\n        console.log('Received response:', response.data);\n        const aiReply = response.data.choices[0].message.content;\n        this.chatMessages.push({\n          sender: 'ai',\n          content: aiReply\n        });\n      } catch (error) {\n        console.error('Doubao API call failed:', error);\n        if (error.response) {\n          console.error('Response data:', error.response.data);\n          console.error('Response status:', error.response.status);\n          console.error('Response headers:', error.response.headers);\n        } else if (error.request) {\n          console.error('No response received:', error.request);\n        } else {\n          console.error('Error setting up the request:', error.message);\n        }\n        this.chatMessages.push({\n          sender: 'ai',\n          content: 'Sorry, the service is temporarily unavailable. Please try again later.'\n        });\n      } finally {\n        this.userInput = '';\n        this.$nextTick(() => {\n          this.$refs.chatMessages.scrollTop = this.$refs.chatMessages.scrollHeight;\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","userInput","chatMessages","isChatWindowVisible","apiKey","modelId","apiUrl","mounted","requestData","model","messages","role","content","console","log","response","post","headers","aiReply","choices","message","push","sender","error","status","request","$nextTick","$refs","scrollTop","scrollHeight","methods","logout","localStorage","removeItem","$router","goToRealTimeStatus","$route","path","goToDataHistory","goToDeviceControl","toggleChatWindow","sendMessage","trim"],"sources":["src/views/HomePage.vue"],"sourcesContent":["<template>\n  <div class=\"home-container\">\n    <el-card class=\"welcome-card\">\n      <h1>Welcome to the Smart Home System</h1>\n      <p class=\"description\">Monitor and manage your IoT devices easily and securely.</p>\n      <div class=\"quick-links\">\n        <el-button type=\"primary\" @click=\"$router.push('/mqtt')\">Go to Dashboard</el-button>\n        <el-button type=\"info\" @click=\"$router.push('/personal-data')\">View Personal Data</el-button>\n        <el-button type=\"danger\" @click=\"logout\">Logout</el-button>\n      </div>\n    </el-card>\n\n    <el-row :gutter=\"20\" class=\"feature-grid\">\n      <el-col :span=\"8\">\n        <div class=\"clickable-wrapper\" @click=\"goToRealTimeStatus\">\n          <el-card class=\"clickable-card\" shadow=\"hover\">\n            <h3>Real-time Monitoring</h3>\n            <p>Stay updated with live sensor data from your smart home environment.</p>\n          </el-card>\n        </div>\n      </el-col>\n      <el-col :span=\"8\">\n        <div class=\"clickable-wrapper\" @click=\"goToDeviceControl\">\n          <el-card class=\"clickable-card\" shadow=\"hover\">\n            <h3>Device Control</h3>\n            <p>Send commands and interact with your connected devices instantly.</p>\n          </el-card>\n        </div>\n      </el-col>\n      <el-col :span=\"8\">\n        <div class=\"clickable-wrapper\" @click=\"goToDataHistory\">\n          <el-card class=\"clickable-card\" shadow=\"hover\">\n            <h3>Data History</h3>\n            <p>Visualize and analyze historical data to identify trends and insights.</p>\n          </el-card>\n        </div>\n      </el-col>\n    </el-row>\n\n    <!-- Intelligent AI mini - buoy -->\n    <div class=\"ai-float-icon\" @click=\"toggleChatWindow\">\n      <img src=\"@/assets/生成机器人浮标图标.png\" alt=\"AI Icon\" style=\"width: 100%; height: 100%; border-radius: 50%;\">\n    </div>\n\n    <!-- Intelligent AI floating window -->\n    <div class=\"ai-chat-window\" v-if=\"isChatWindowVisible\">\n      <div class=\"chat-header\">\n        <h2>Smart Home Assistant</h2>\n      </div>\n      <div class=\"chat-messages\" ref=\"chatMessages\">\n        <!-- Show the communication message -->\n        <div\n          v-for=\"(message, index) in chatMessages\"\n          :key=\"index\"\n          :class=\"message.sender === 'user' ? 'user-message' : 'ai-message'\"\n        >\n          <div class=\"message-bubble\">{{ message.content }}</div>\n        </div>\n      </div>\n      <div class=\"chat-input\">\n        <el-input\n          v-model=\"userInput\"\n          placeholder=\"Ask me about your smart home devices...\"\n          @keyup.enter=\"sendMessage\"\n        ></el-input>\n        <el-button @click=\"sendMessage\">Send</el-button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'HomePage',\n  data() {\n    return {\n      userInput: '',\n      chatMessages: [],\n      isChatWindowVisible: false,\n      apiKey: 'a104e834-a3c5-4760-a819-2e4dd8de484d',\n      modelId: 'doubao-1-5-thinking-pro-250415',\n      apiUrl: 'https://ark.cn-beijing.volces.com/api/v3/chat/completions'\n    };\n  },\n  async mounted() {\n    try {\n      const requestData = {\n        model: this.modelId,\n        messages: [\n          {\n            role: 'system',\n            content: 'You are a smart home assistant. Say hello to the user and introduce. Answer in English.'\n          }\n        ]\n      };\n      console.log('Sending initial request data:', requestData);\n\n      const response = await axios.post(this.apiUrl, requestData, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.apiKey}`\n        }\n      });\n\n      console.log('Received initial response:', response.data);\n\n      const aiReply = response.data.choices[0].message.content;\n      this.chatMessages.push({ sender: 'ai', content: aiReply });\n    } catch (error) {\n      console.error('Initial API call failed:', error);\n      if (error.response) {\n        console.error('Response data:', error.response.data);\n        console.error('Response status:', error.response.status);\n        console.error('Response headers:', error.response.headers);\n      } else if (error.request) {\n        console.error('No response received:', error.request);\n      } else {\n        console.error('Error setting up the request:', error.message);\n      }\n      this.chatMessages.push({\n        sender: 'ai',\n        content: 'Sorry, the service is temporarily unavailable. Please try again later.'\n      });\n    } finally {\n      this.$nextTick(() => {\n        this.$refs.chatMessages.scrollTop = this.$refs.chatMessages.scrollHeight;\n      });\n    }\n  },\n  methods: {\n    logout() {\n      localStorage.removeItem('loggedIn');\n      this.$router.push('/login');\n    },\n    goToRealTimeStatus() {\n      console.log('Navigating to real-time status...');\n      if (this.$route.path !== '/real-time-status') {\n        this.$router.push('/real-time-status');\n      }\n    },\n    goToDataHistory() {\n      if (this.$route.path !== '/data-history') {\n        this.$router.push('/data-history');\n      }\n    },\n    goToDeviceControl() {\n      if (this.$route.path !== '/device-control') {\n        this.$router.push('/device-control');\n      }\n    },\n    toggleChatWindow() {\n      this.isChatWindowVisible = !this.isChatWindowVisible;\n    },\n    async sendMessage() {\n      if (!this.userInput.trim()) return;\n\n      this.chatMessages.push({ sender: 'user', content: this.userInput });\n\n      try {\n        const requestData = {\n          model: this.modelId,\n          messages: [\n            { role: 'system', content: 'You are a smart home assistant. Answer all questions in English regarding device control and data query.' },\n            { role: 'user', content: this.userInput }\n          ]\n        };\n        console.log('Sending request data:', requestData);\n\n        const response = await axios.post(this.apiUrl, requestData, {\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${this.apiKey}`\n          }\n        });\n\n        console.log('Received response:', response.data);\n\n        const aiReply = response.data.choices[0].message.content;\n        this.chatMessages.push({ sender: 'ai', content: aiReply });\n      } catch (error) {\n        console.error('Doubao API call failed:', error);\n        if (error.response) {\n          console.error('Response data:', error.response.data);\n          console.error('Response status:', error.response.status);\n          console.error('Response headers:', error.response.headers);\n        } else if (error.request) {\n          console.error('No response received:', error.request);\n        } else {\n          console.error('Error setting up the request:', error.message);\n        }\n        this.chatMessages.push({\n          sender: 'ai',\n          content: 'Sorry, the service is temporarily unavailable. Please try again later.'\n        });\n      } finally {\n        this.userInput = '';\n        this.$nextTick(() => {\n          this.$refs.chatMessages.scrollTop = this.$refs.chatMessages.scrollHeight;\n        });\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n.home-container {\n  padding: 40px;\n  background-color: #f5f7fa;\n  min-height: 100vh;\n}\n.welcome-card {\n  text-align: center;\n  padding: 30px;\n  margin-bottom: 40px;\n}\n.description {\n  font-size: 18px;\n  color: #666;\n  margin-bottom: 20px;\n}\n.quick-links {\n  display: flex;\n  justify-content: center;\n  gap: 20px;\n}\n.feature-grid {\n  margin-top: 30px;\n}\n.el-card h3 {\n  margin-bottom: 10px;\n}\n.clickable-wrapper {\n  cursor: pointer;\n}\n.clickable-card:hover {\n  box-shadow: 0 6px 20px rgba(0, 0, 0, 0.1);\n  transition: box-shadow 0.3s ease;\n}\n\n/* AI 浮标和窗口样式 */\n.ai-float-icon {\n  position: fixed;\n  right: 20px;\n  bottom: 20px;\n  width: 56px;\n  height: 56px;\n  background: #409eff;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n  color: white;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);\n  cursor: pointer;\n  transition: transform 0.2s;\n}\n\n.ai-float-icon:hover {\n  transform: scale(1.05);\n}\n\n.ai-chat-window {\n  position: fixed;\n  right: 20px;\n  bottom: 80px;\n  width: 350px;\n  height: 420px;\n  border: 1px solid #e4e7ed;\n  border-radius: 8px;\n  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);\n  background: white;\n  display: flex;\n  flex-direction: column;\n}\n\n.chat-header {\n  padding: 12px 16px;\n  border-bottom: 1px solid #e4e7ed;\n}\n\n.chat-header h2 {\n  margin: 0;\n  font-size: 18px;\n  color: #409eff; /* 蓝色字体 */\n  text-align: center; /* 居中 */\n}\n\n.chat-messages {\n  flex: 1;\n  padding: 16px;\n  overflow-y: auto;\n}\n\n.user-message {\n  text-align: right;\n  margin: 8px 0;\n}\n\n.ai-message {\n  text-align: left;\n  margin: 8px 0;\n}\n\n.message-bubble {\n  display: inline-block;\n  padding: 8px 12px;\n  border-radius: 8px;\n  max-width: 70%;\n}\n\n.user-message .message-bubble {\n  background-color: #e1f5fe;\n  color: #333;\n}\n\n.ai-message .message-bubble {\n  background-color: #f1f3f4;\n  color: #303133;\n}\n\n.chat-input {\n  padding: 16px;\n  border-top: 1px solid #e4e7ed;\n  display: flex;\n  gap: 8px;\n}\n\n.chat-input el-input {\n  flex: 1;\n  border-radius: 4px;\n  box-shadow: none;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}