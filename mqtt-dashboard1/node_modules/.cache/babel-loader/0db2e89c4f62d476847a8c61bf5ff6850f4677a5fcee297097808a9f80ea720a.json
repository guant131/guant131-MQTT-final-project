{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  name: 'RealTimeStatusPage',\n  data() {\n    return {\n      devices: [{\n        name: 'aircon',\n        label: 'Air Conditioner Sensor',\n        subscribed: false,\n        latestData: null\n      }, {\n        name: 'heater',\n        label: 'Water Heater',\n        subscribed: false,\n        latestData: null\n      }, {\n        name: 'camera',\n        label: 'Surveillance Camera',\n        subscribed: false,\n        latestData: null\n      }, {\n        name: 'light',\n        label: 'Lighting Controller',\n        subscribed: false,\n        latestData: null\n      }]\n    };\n  },\n  methods: {\n    async subscribeDevice(device) {\n      try {\n        device.subscribed = true;\n        await this.refreshDevice(device);\n      } catch (error) {\n        console.error(`Failed to subscribe to ${device.name}:`, error);\n        device.subscribed = false;\n        device.latestData = null;\n      }\n    },\n    unsubscribeDevice(device) {\n      device.subscribed = false;\n      device.latestData = null;\n    },\n    async refreshDevice(device) {\n      if (!device.subscribed) return;\n      try {\n        let url = '';\n        switch (device.name) {\n          case 'aircon':\n            url = '/api/device/aircon/view-data';\n            break;\n          case 'heater':\n            url = '/api/realtime-db/water_heater';\n            break;\n          case 'camera':\n            url = '/api/realtime-db/fps';\n            break;\n          case 'light':\n            url = '/api/realtime-db/light_control';\n            break;\n        }\n        const response = await axios.get(`http://127.0.0.1:5050${url}`);\n        device.latestData = response.data;\n      } catch (error) {\n        console.error(`Failed to refresh ${device.name}:`, error);\n      }\n    },\n    navigateToPage(device) {\n      switch (device.name) {\n        case 'aircon':\n          this.$router.push({\n            name: 'DevicePage',\n            params: {\n              deviceId: 'aircon'\n            }\n          });\n          break;\n        case 'heater':\n          this.$router.push({\n            name: 'WaterHeaterPage',\n            params: {\n              deviceId: 'heater'\n            }\n          });\n          break;\n        case 'camera':\n          this.$router.push({\n            name: 'SurveillanceCameraPage',\n            params: {\n              deviceId: 'camera'\n            }\n          });\n          break;\n        case 'light':\n          this.$router.push({\n            name: 'LightingControllerPage',\n            params: {\n              deviceId: 'light'\n            }\n          });\n          break;\n        default:\n          console.error('Unknown device');\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","devices","label","subscribed","latestData","methods","subscribeDevice","device","refreshDevice","error","console","unsubscribeDevice","url","response","get","navigateToPage","$router","push","params","deviceId"],"sources":["src/views/RealTimeStatusPage.vue"],"sourcesContent":["<template>\n  <div class=\"status-container\">\n    <h2 class=\"title\">Real-time Device Monitoring</h2>\n    <el-row :gutter=\"20\">\n      <el-col v-for=\"device in devices\" :key=\"device.name\" :span=\"12\">\n        <el-card class=\"device-card\">\n          <div class=\"device-header\">{{ device.label }}</div>\n          <p><strong>Status:</strong>\n            <el-tag :type=\"device.subscribed ? 'success' : 'danger'\">\n              {{ device.subscribed ? 'Subscribed' : 'Not Subscribed' }}\n            </el-tag>\n          </p>\n          <p><strong>Latest Data:</strong></p>\n\n          <!-- ✅ 美观化后的数据展示区域 -->\n          <div class=\"data-block\" v-if=\"device.latestData\">\n            <div v-for=\"(value, key) in device.latestData\" :key=\"key\" class=\"data-row\">\n              <strong>{{ key }}:</strong> <span>{{ value }}</span>\n            </div>\n          </div>\n          <div class=\"data-block\" v-else>\n            <span>N/A</span>\n          </div>\n\n          <div class=\"card-actions\">\n            <el-button size=\"mini\" type=\"primary\" @click=\"subscribeDevice(device)\" :disabled=\"device.subscribed\">\n              Subscribe\n            </el-button>\n            <div class=\"right-buttons\">\n              <el-button size=\"mini\" type=\"danger\" @click=\"unsubscribeDevice(device)\" :disabled=\"!device.subscribed\">\n                Unsubscribe\n              </el-button>\n              <el-button size=\"mini\" type=\"primary\" @click=\"refreshDevice(device)\" :disabled=\"!device.subscribed\">\n                Refresh\n              </el-button>\n              <el-button size=\"mini\" @click=\"navigateToPage(device)\">\n                View\n              </el-button>\n            </div>\n          </div>\n        </el-card>\n      </el-col>\n    </el-row>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'RealTimeStatusPage',\n  data() {\n    return {\n      devices: [\n        {\n          name: 'aircon',\n          label: 'Air Conditioner Sensor',\n          subscribed: false,\n          latestData: null\n        },\n        {\n          name: 'heater',\n          label: 'Water Heater',\n          subscribed: false,\n          latestData: null\n        },\n        {\n          name: 'camera',\n          label: 'Surveillance Camera',\n          subscribed: false,\n          latestData: null\n        },\n        {\n          name: 'light',\n          label: 'Lighting Controller',\n          subscribed: false,\n          latestData: null\n        }\n      ]\n    }\n  },\n  methods: {\n    async subscribeDevice(device) {\n      try {\n        device.subscribed = true;\n        await this.refreshDevice(device);\n      } catch (error) {\n        console.error(`Failed to subscribe to ${device.name}:`, error);\n        device.subscribed = false;\n        device.latestData = null;\n      }\n    },\n    unsubscribeDevice(device) {\n      device.subscribed = false;\n      device.latestData = null;\n    },\n    async refreshDevice(device) {\n      if (!device.subscribed) return;\n\n      try {\n        let url = '';\n        switch (device.name) {\n          case 'aircon':\n            url = '/api/device/aircon/view-data';\n            break;\n          case 'heater':\n            url = '/api/realtime-db/water_heater';\n            break;\n          case 'camera':\n            url = '/api/realtime-db/fps';\n            break;\n          case 'light':\n            url = '/api/realtime-db/light_control';\n            break;\n        }\n\n        const response = await axios.get(`http://127.0.0.1:5050${url}`);\n        device.latestData = response.data;\n\n      } catch (error) {\n        console.error(`Failed to refresh ${device.name}:`, error);\n      }\n    },\n    navigateToPage(device) {\n      switch (device.name) {\n        case 'aircon':\n          this.$router.push({ name: 'DevicePage', params: { deviceId: 'aircon' } });\n          break;\n        case 'heater':\n          this.$router.push({ name: 'WaterHeaterPage', params: { deviceId: 'heater' } });\n          break;\n        case 'camera':\n          this.$router.push({ name: 'SurveillanceCameraPage', params: { deviceId: 'camera' } });\n          break;\n        case 'light':\n          this.$router.push({ name: 'LightingControllerPage', params: { deviceId: 'light' } });\n          break;\n        default:\n          console.error('Unknown device');\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.status-container {\n  padding: 30px;\n}\n\n.title {\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 20px;\n  text-align: center;\n}\n\n.device-card {\n  margin-bottom: 30px;\n  border-radius: 12px;\n  transition: box-shadow 0.3s;\n  min-height: 350px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  position: relative;\n}\n\n.device-card:hover {\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n}\n\n.device-header {\n  font-size: 18px;\n  font-weight: 500;\n  margin-bottom: 10px;\n}\n\n.card-actions {\n  position: absolute;\n  bottom: 15px;\n  left: 15px;\n  right: 15px;\n  display: flex;\n  justify-content: space-between;\n}\n\n.right-buttons {\n  display: flex;\n  gap: 8px;\n  margin-right: 288px;\n}\n\n.data-block {\n  background-color: #f8f8f8;\n  padding: 10px;\n  border-radius: 6px;\n  font-family: monospace;\n  max-height: 180px;\n  overflow: auto;\n  margin-bottom: 40px;\n  flex-grow: 1;\n}\n\n.data-row {\n  display: flex;\n  justify-content: space-between;\n  padding: 4px 0;\n  border-bottom: 1px solid #eee;\n  font-family: monospace;\n}\n</style>\n"],"mappings":";AA+CA,OAAAA,KAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,OAAA,GACA;QACAF,IAAA;QACAG,KAAA;QACAC,UAAA;QACAC,UAAA;MACA,GACA;QACAL,IAAA;QACAG,KAAA;QACAC,UAAA;QACAC,UAAA;MACA,GACA;QACAL,IAAA;QACAG,KAAA;QACAC,UAAA;QACAC,UAAA;MACA,GACA;QACAL,IAAA;QACAG,KAAA;QACAC,UAAA;QACAC,UAAA;MACA;IAEA;EACA;EACAC,OAAA;IACA,MAAAC,gBAAAC,MAAA;MACA;QACAA,MAAA,CAAAJ,UAAA;QACA,WAAAK,aAAA,CAAAD,MAAA;MACA,SAAAE,KAAA;QACAC,OAAA,CAAAD,KAAA,2BAAAF,MAAA,CAAAR,IAAA,KAAAU,KAAA;QACAF,MAAA,CAAAJ,UAAA;QACAI,MAAA,CAAAH,UAAA;MACA;IACA;IACAO,kBAAAJ,MAAA;MACAA,MAAA,CAAAJ,UAAA;MACAI,MAAA,CAAAH,UAAA;IACA;IACA,MAAAI,cAAAD,MAAA;MACA,KAAAA,MAAA,CAAAJ,UAAA;MAEA;QACA,IAAAS,GAAA;QACA,QAAAL,MAAA,CAAAR,IAAA;UACA;YACAa,GAAA;YACA;UACA;YACAA,GAAA;YACA;UACA;YACAA,GAAA;YACA;UACA;YACAA,GAAA;YACA;QACA;QAEA,MAAAC,QAAA,SAAAf,KAAA,CAAAgB,GAAA,yBAAAF,GAAA;QACAL,MAAA,CAAAH,UAAA,GAAAS,QAAA,CAAAb,IAAA;MAEA,SAAAS,KAAA;QACAC,OAAA,CAAAD,KAAA,sBAAAF,MAAA,CAAAR,IAAA,KAAAU,KAAA;MACA;IACA;IACAM,eAAAR,MAAA;MACA,QAAAA,MAAA,CAAAR,IAAA;QACA;UACA,KAAAiB,OAAA,CAAAC,IAAA;YAAAlB,IAAA;YAAAmB,MAAA;cAAAC,QAAA;YAAA;UAAA;UACA;QACA;UACA,KAAAH,OAAA,CAAAC,IAAA;YAAAlB,IAAA;YAAAmB,MAAA;cAAAC,QAAA;YAAA;UAAA;UACA;QACA;UACA,KAAAH,OAAA,CAAAC,IAAA;YAAAlB,IAAA;YAAAmB,MAAA;cAAAC,QAAA;YAAA;UAAA;UACA;QACA;UACA,KAAAH,OAAA,CAAAC,IAAA;YAAAlB,IAAA;YAAAmB,MAAA;cAAAC,QAAA;YAAA;UAAA;UACA;QACA;UACAT,OAAA,CAAAD,KAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}